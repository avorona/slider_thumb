/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "js/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 2);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Gallery = function () {\n  function Gallery(settings) {\n    _classCallCheck(this, Gallery);\n\n    this.settings = settings;\n    this.dataAmount = settings.galleryAmount;\n    this.galleryWrapper = settings.container;\n    this.galleryItemSelector = settings.galleryItemSelector;\n    this.parsedResponse = [];\n    this.data = [];\n    this.portionOfData = [];\n    this.dataSet = {\n      start: 0,\n      step: 5,\n      end: 0,\n      totalLength: 0\n    };\n\n    this.thumbnails = {\n\n      height: 100,\n      width: 0,\n      itemWidth: 114,\n      list: 0,\n      listHeight: 90,\n      url: [],\n      triggers: []\n    };\n    this.gallery = {\n      width: 0,\n      items: [],\n      total: [],\n      prevBtnSelector: settings.prevSlide || false,\n      prevBtnNode: 0,\n      nextBtnSelector: settings.nextSlide || false,\n      nextBtnNode: 0\n    };\n    this.popup = {\n      content: []\n    };\n    this.galleryList;\n    this.currentIndex = 0;\n    this.initialLoad();\n  }\n\n  _createClass(Gallery, [{\n    key: 'initialLoad',\n    value: function initialLoad() {\n      var _this = this;\n\n      var self = this;\n\n      new Promise(function (resolve, reject) {\n\n        self.toggleLoader(true);\n\n        setTimeout(function () {\n          resolve();\n        }, 1000);\n      }).then(function () {\n\n        _this.fetch();\n      }).catch(function (reject) {\n\n        throw new Error('check a promise chain');\n      });\n    }\n  }, {\n    key: 'secondaryLoad',\n    value: function secondaryLoad() {\n\n      this.initiateData(true);\n    }\n  }, {\n    key: 'createCORSRequest',\n    value: function createCORSRequest(method, url) {\n\n      var xhr = new XMLHttpRequest();\n      if ('withCredentials' in xhr) {\n\n        // Check if the XMLHttpRequest object has a \"withCredentials\" property.\n        // \"withCredentials\" only exists on XMLHTTPRequest2 objects.\n        xhr.open(method, url, true);\n      } else if (typeof XDomainRequest != 'undefined') {\n\n        // Otherwise, check if XDomainRequest.\n        // XDomainRequest only exists in IE, and is IE's way of making CORS requests.\n        xhr = new XDomainRequest();\n        xhr.open(method, url);\n      } else {\n\n        // Otherwise, CORS is not supported by the browser.\n        xhr = null;\n      }\n      // console.log(xhr);\n      return xhr;\n    }\n  }, {\n    key: 'fetch',\n    value: function fetch() {\n\n      var self = this;\n\n      var url = 'images.json';\n\n      var xhr = self.createCORSRequest('GET', url);\n\n      if (!xhr) {\n        throw new Error('CORS not supported');\n      }\n\n      // Response handlers.\n      xhr.onload = function () {\n        var responseText = xhr.responseText;\n\n        self.handleResponse(responseText);\n      };\n\n      xhr.onerror = function () {\n\n        throw new Error('Woops, there was an error making the request.');\n      };\n\n      xhr.send();\n    }\n  }, {\n    key: 'handleResponse',\n    value: function handleResponse(response) {\n\n      this.parsedResponse = JSON.parse(response);\n\n      this.initiateData();\n    }\n  }, {\n    key: 'initiateData',\n    value: function initiateData(secondary) {\n      var _this2 = this;\n\n      var status = secondary || false;\n\n      var self = this;\n\n      if (status) {\n\n        new Promise(function (resolve, reject) {\n\n          setTimeout(function () {\n            self.toggleLoader(false);\n          }, 1000);\n\n          resolve();\n        }).then(function () {\n          self.sliceDataOnPortions(status);\n        }).then(function () {\n          self.showData(true);\n          // console.log('2');\n        }).then(function () {\n          self.toggleLoader(false);\n          // console.log('3');\n        }).catch(function (reject) {\n          // console.log('da');\n        });\n      } else {\n\n        new Promise(function (resolve, reject) {\n\n          self.toggleLoader(true);\n\n          // console.log('1');\n          resolve();\n        }).then(function () {\n          var items = self.parsedResponse;\n          // console.log(items);\n          var limittedArray = items.slice(0, _this2.dataAmount);\n\n          limittedArray.map(function (el) {\n\n            self.data.push(el);\n          });\n          // console.log('2');\n        }).then(function () {\n          self.sliceDataOnPortions();\n          // console.log('3');\n        }).then(function () {\n\n          self.showData();\n          // console.log('4');\n        });\n      }\n    }\n  }, {\n    key: 'sliceDataOnPortions',\n    value: function sliceDataOnPortions(secondary) {\n\n      var status = secondary || false;\n      var self = this;\n      var items = self.data;\n\n      var step = this.dataSet.step;\n      var start = this.dataSet.start;\n      var end = this.dataSet.end;\n\n      end = start + step;\n\n      self.dataSet.totalLength = end;\n\n      // console.log(self.dataSet.totalLength);\n\n      if (status) {\n        // console.log(start,items.length,step);\n\n        if (start < items.length - step) {\n\n          // console.log(items.length);\n\n          start += step;\n          end = start + step;\n\n          // console.log(start, end);\n\n          var portionArray = items.slice(start, end);\n\n          self.portionOfData.length = 0;\n\n          portionArray.map(function (el) {\n\n            self.portionOfData.push(el);\n          });\n\n          this.dataSet.start = start;\n          this.dataSet.end = end;\n        } else {\n\n          self.portionOfData.length = 0;\n        }\n      } else {\n\n        var _portionArray = items.slice(start, end);\n\n        _portionArray.map(function (el) {\n\n          self.portionOfData.push(el);\n        });\n      }\n    }\n  }, {\n    key: 'showData',\n    value: function showData(secondary) {\n\n      var status = secondary || false;\n\n      var self = this;\n\n      var galleryContainer = [].slice.call(document.querySelectorAll(this.galleryWrapper));\n\n      galleryContainer.forEach(function (el) {\n\n        self.fillGallery(el, status);\n\n        self.addThumbs(el, status);\n      });\n    }\n  }, {\n    key: 'fillGallery',\n    value: function fillGallery(galleryContainer, secondary) {\n\n      var status = secondary || false;\n      var self = this;\n      var items = self.portionOfData;\n      var container = galleryContainer;\n\n      if (!status) {\n\n        var itemsAmount = self.dataSet.totalLength;\n        var galleryMinHeight = container.offsetHeight;\n        var thumbnailsHeight = this.thumbnails.height;\n        // console.log(self.dataSet.totalLength);\n\n        var gallery = document.createElement('div');\n\n        gallery.classList.add('gallery', 'js-gallery');\n\n        var galleryHeight = galleryMinHeight - thumbnailsHeight;\n        gallery.style.minHeight = galleryHeight + 'px';\n\n        container.appendChild(gallery);\n\n        var galleryWidth = gallery.offsetWidth;\n\n        self.gallery.width = galleryWidth;\n\n        var galleryList = document.createElement('ul');\n\n        galleryList.classList.add('gallery__list', 'js-gallery-list');\n        galleryList.style.minHeight = galleryHeight + 'px';\n\n        self.galleryList = galleryList;\n\n        self.thumbnails.width = self.thumbnails.itemWidth * (self.dataSet.totalLength + 1);\n\n        new Promise(function (resolve, reject) {\n\n          self.addItemsToGallery(self.galleryList, items);\n\n          resolve();\n        }).then(function () {\n          self.showFirstItems(galleryList);\n        }).then(function () {\n          gallery.appendChild(galleryList);\n        }).then(function () {\n          self.bindEvents();\n        }).then(function () {\n          self.navigation(container);\n        });\n      } else {\n\n        self.thumbnails.width = self.thumbnails.itemWidth * (self.dataSet.totalLength + 1);\n\n        new Promise(function (resolve, reject) {\n\n          self.addItemsToGallery(self.galleryList, items);\n\n          resolve();\n        }).then(function () {\n          self.bindEvents();\n        });\n        // console.log(self.galleryList);\n\n      }\n\n      return true;\n    }\n  }, {\n    key: 'addItemsToGallery',\n    value: function addItemsToGallery(list, items) {\n\n      var self = this;\n\n      // console.log(list);\n\n      var galleryList = list;\n      var data = items;\n      var dataLength = data.length;\n      var galleryMaxWidth = this.gallery.width;\n\n      self.dataSet.totalLength += data.length;\n\n      // console.log(self.dataSet.totalLength);\n\n\n      for (var j = 0; j < dataLength; j++) {\n\n        var galleryItem = document.createElement('li');\n        galleryItem.classList.add('gallery__item', self.galleryItemSelector);\n\n        var galleryItemID = 'slide' + data[j].id;\n        galleryItem.setAttribute('id', galleryItemID);\n\n        galleryItem.style.maxWidth = galleryMaxWidth + 'px';\n\n        galleryItem.innerHTML = '<img src=\"' + data[j].url + '\" class=\"gallery__img\"> ';\n\n        galleryList.appendChild(galleryItem);\n      }\n\n      var slidesNodeList = list.childNodes;\n\n      // console.log(slidesNodeList);\n\n      var slides = [].slice.call(slidesNodeList);\n\n      // console.log(slides);\n\n      self.gallery.items = slides;\n\n      // console.log(self.gallery.total.length, self.dataAmount);\n\n      if (self.gallery.total.length < self.dataAmount) {\n\n        self.gallery.total = self.gallery.items.map(function (el) {\n\n          return el;\n        });\n      }\n    }\n  }, {\n    key: 'bindEvents',\n    value: function bindEvents() {\n\n      this.fullPageMode();\n    }\n  }, {\n    key: 'fullPageMode',\n    value: function fullPageMode() {\n\n      var self = this;\n      self.createPoPUp();\n    }\n  }, {\n    key: 'createPoPUp',\n    value: function createPoPUp(r) {\n\n      var self = this;\n\n      var popup = {};\n\n      var modal = document.querySelectorAll('.modal');\n\n      if (modal.length < 2) {\n\n        var body = document.querySelector('body');\n\n        var container = document.createElement('div');\n        container.classList.add('modal', 'modal__fp');\n\n        var inner = document.createElement('div');\n        inner.classList.add('modal__inner');\n\n        container.appendChild(inner);\n\n        var content = document.createElement('div');\n        content.classList.add('modal__content');\n        content.innerHTML = '<span class=\"modal__closeBtn\" ></span>' + '<img class=\"modal__img\" src=\"\">';\n\n        self.clickEventClosePopUp(content);\n\n        inner.appendChild(content);\n\n        // innet.appendChild(content);\n        self.popup.content = content;\n        self.popup.wrap = container;\n\n        body.appendChild(container);\n      };\n\n      self.getImgSrc();\n    }\n  }, {\n    key: 'getImgSrc',\n    value: function getImgSrc() {\n\n      var self = this;\n\n      var popup = self.popup;\n      var list = self.galleryList;\n\n      // console.log(list);\n\n      var current = [].slice.call(list.children).filter(function (el) {\n\n        if (el.classList.contains(self.galleryItemSelector)) return el;\n      });\n      // console.log(current);\n\n\n      current.forEach(function (el) {\n\n        el.addEventListener('click', function () {\n          // console.log(el);\n          var c = [].slice.call(el.children).find(function (e) {\n\n            var r = e.hasAttribute('src') ? e : false;\n\n            return r;\n          });\n\n          popup.imgSrc = c.getAttribute('src');\n          self.showFullPageImg(popup);\n        });\n      });\n    }\n  }, {\n    key: 'showFullPageImg',\n    value: function showFullPageImg(con) {\n\n      var imgSrc = con.imgSrc;\n      var wrap = con.wrap;\n      var content = con.content;\n      var body = document.querySelector('body');\n\n      var img = [].slice.call(content.children).find(function (el) {\n\n        if (el.classList.contains('modal__img')) return el;\n      });\n\n      img.setAttribute('src', imgSrc);\n      wrap.classList.add('is-active');\n      body.classList.add('over-hid');\n    }\n  }, {\n    key: 'clickEventClosePopUp',\n    value: function clickEventClosePopUp(con) {\n\n      var content = con;\n      var body = document.querySelector('body');\n\n      var close = [].slice.call(content.children).find(function (el) {\n\n        if (el.classList.contains('modal__closeBtn')) return el;\n      });\n\n      close.addEventListener('click', function (eve) {\n\n        console.log(eve.currentTarget, eve.detail);\n\n        eve.currentTarget.closest('.modal').classList.remove('is-active');\n\n        body.classList.remove('over-hid');\n      });\n    }\n  }, {\n    key: 'showFirstItems',\n    value: function showFirstItems(list) {\n\n      var self = this;\n\n      var slides = self.gallery.items;\n\n      var firstSlides = slides.filter(function (el) {\n\n        if (el.getAttribute('id') === 'slide1') return el;\n      });\n\n      firstSlides.forEach(function (el) {\n\n        el.classList.add('is-visible');\n      });\n    }\n  }, {\n    key: 'navigation',\n    value: function navigation(galleryContainer) {\n\n      var self = this;\n      var thisGalleryWrapper = galleryContainer;\n      var thisGalleryList = this.galleryList;\n      var prevBtn = void 0,\n          nextBtn = void 0;\n      var thisGalleryChildren = [].slice.call(thisGalleryWrapper.children);\n\n      if (!self.gallery.prevBtnSelector && !self.gallery.nextBtnSelector) {\n\n        prevBtn = document.createElement('div');\n        prevBtn.classList.add('control-btn', 'control-btn__left', 'js-gallery-prev');\n        prevBtn.innerHTML = '<button class=\"icon-btn icon-btn_left\"></button>';\n\n        nextBtn = document.createElement('div');\n        nextBtn.classList.add('control-btn', 'control-btn__right', 'js-gallery-next');\n        nextBtn.innerHTML = '<button class=\"icon-btn icon-btn_right\"></button>';\n\n        thisGalleryWrapper.classList.add('add-controllers');\n        thisGalleryWrapper.appendChild(prevBtn);\n        thisGalleryWrapper.appendChild(nextBtn);\n      } else {\n\n        nextBtn = thisGalleryChildren.filter(function (el) {\n\n          if (el.classList.contains(self.gallery.nextBtnSelector)) {\n            return el;\n          }\n        });\n\n        prevBtn = thisGalleryChildren.filter(function (el) {\n\n          if (el.classList.contains(self.gallery.prevBtnSelector)) {\n            return el;\n          }\n        });\n      }\n\n      self.gallery.prevBtnNode = prevBtn;\n      self.gallery.nextBtnNode = nextBtn;\n\n      this.nextSlide();\n      this.prevSlide();\n    }\n  }, {\n    key: 'nextSlide',\n    value: function nextSlide() {\n\n      var self = this;\n      var nextSlideBtn = self.gallery.nextBtnNode;\n\n      nextSlideBtn.forEach(function (e) {\n\n        e.addEventListener('click', function () {\n\n          var slides = self.gallery.items;\n\n          var currentIndex = slides.findIndex(function (el) {\n\n            if (el.classList.contains('is-visible')) {\n              return el;\n            }\n          });\n\n          self.currentIndex = currentIndex;\n\n          self.secondaryLoad();\n\n          slides[self.currentIndex].classList.toggle('is-visible');\n\n          self.currentIndex = (self.currentIndex + 1) % slides.length;\n\n          slides[self.currentIndex].classList.toggle('is-visible');\n\n          self.changeThumbnails();\n        });\n      });\n    }\n  }, {\n    key: 'prevSlide',\n    value: function prevSlide() {\n      var self = this;\n      var prevSlideBtn = self.gallery.prevBtnNode;\n\n      prevSlideBtn.forEach(function (el) {\n\n        el.addEventListener('click', function () {\n\n          var slides = self.gallery.total;\n\n          var lastSlide = slides.length - 1;\n\n          var currentIndex = slides.findIndex(function (el) {\n\n            if (el.classList.contains('is-visible')) {\n              return el;\n            }\n          });\n\n          self.currentIndex = currentIndex;\n\n          slides[self.currentIndex].classList.toggle('is-visible');\n\n          if (self.currentIndex <= 0) {\n\n            self.currentIndex = lastSlide;\n          } else if (self.currentIndex > 0 && self.currentIndex <= lastSlide) {\n\n            self.currentIndex--;\n          }\n\n          slides[self.currentIndex].classList.toggle('is-visible');\n\n          self.changeThumbnails();\n        });\n      });\n    }\n  }, {\n    key: 'addThumbs',\n    value: function addThumbs(galleryContainer, secondary) {\n\n      var self = this;\n      var status = secondary || false;\n      var data = self.portionOfData;\n      var container = galleryContainer;\n\n      self.thumbnails.url = data.map(function (el) {\n\n        return el.thumbnailUrl;\n      });\n\n      if (!status) {\n\n        var thumbs = document.createElement('div');\n        thumbs.style.minHeight = self.thumbsHeight + 'px';\n        thumbs.classList.add('g-thumbnails');\n\n        var thumbsList = document.createElement('ul');\n        // let stylingPadding=10;\n        var thumbsListWidth = self.thumbnails.width;\n        // console.log(self.thumbnails.width,thumbsListWidth);\n        thumbsList.style.width = thumbsListWidth + 'px';\n\n        var thumbsListHeight = self.thumbsListHeight;\n        thumbsList.style.height = thumbsListHeight + 'px';\n\n        thumbsList.classList.add('g-thumbnails__list');\n\n        self.thumbnails.list = thumbsList;\n\n        this.addThumbsItem();\n\n        thumbs.appendChild(thumbsList);\n\n        // console.log(container);\n        container.appendChild(thumbs);\n\n        this.moveThumbnails();\n\n        this.toggleThumbs();\n      } else {\n\n        var _thumbsListWidth = self.thumbnails.width;\n        // console.log(self.thumbnails.width,thumbsListWidth);\n        self.thumbnails.list.style.width = _thumbsListWidth + 'px';\n\n        this.addThumbsItem();\n\n        this.moveThumbnails();\n\n        this.toggleThumbs();\n      }\n    }\n  }, {\n    key: 'addThumbsItem',\n    value: function addThumbsItem() {\n\n      var self = this;\n      var thumbs = self.thumbnails.url;\n      var data = self.portionOfData;\n      var thumbsList = self.thumbnails.list;\n      var thumbsItemWidth = this.thumbnails.itemWidth;\n      var thumbsHeight = self.thumbnails.listHeight;\n\n      // console.log(thumbs, data, thumbsHeight);  \n      for (var i = 0; i < data.length; i++) {\n\n        var thumbsItem = document.createElement('li');\n\n        thumbsItem.style.width = thumbsItemWidth + 'px';\n        thumbsItem.style.height = thumbsHeight + 'px';\n\n        thumbsItem.classList.add('g-thumbnails__item');\n\n        var equalizer = data[i].id - 1;\n\n        var thumbsItemWrap = document.createElement('div');\n        thumbsItemWrap.setAttribute('data-thumb', equalizer);\n        thumbsItemWrap.classList.add('g-thumbnails__item-wrap', 'js-thumb-slide');\n\n        self.thumbnails.triggers.push(thumbsItemWrap);\n\n        thumbsItemWrap.innerHTML = '<img src=\"' + thumbs[i] + '\" class=\"g-thumbnails__img\"' + ' style=\"max-width: 100%;\">';\n\n        thumbsItem.appendChild(thumbsItemWrap);\n\n        thumbsList.appendChild(thumbsItem);\n      }\n    }\n  }, {\n    key: 'toggleThumbs',\n    value: function toggleThumbs() {\n\n      var self = this;\n\n      var thumbTrigger = self.thumbnails.triggers;\n\n      // console.log(thumbTriggersList);\n\n      thumbTrigger.forEach(function (el) {\n\n        el.addEventListener('click', function (event) {\n\n          var triggerSiblingSlides = el.closest('.g-thumbnails').previousSibling.childNodes;\n\n          // console.log(triggerSiblingSlides);\n\n          var slides = [].slice.call(triggerSiblingSlides[0].childNodes);\n\n          // console.log(slides,self.currentIndex);\n\n          var indexToTrigger = +event.currentTarget.getAttribute('data-thumb');\n\n          slides[self.currentIndex].classList.toggle('is-visible');\n\n          self.currentIndex = indexToTrigger;\n          // console.log(slides,self.currentIndex);\n          self.changeThumbnails();\n\n          slides[self.currentIndex].classList.toggle('is-visible');\n        });\n      });\n    }\n  }, {\n    key: 'changeThumbnails',\n    value: function changeThumbnails() {\n\n      var self = this;\n      var index = self.currentIndex;\n      var thumbTrigger = self.thumbnails.triggers;\n\n      self.moveThumbnails();\n\n      thumbTrigger.forEach(function (el) {\n\n        el.classList.remove('is-active');\n\n        var thumbDataAttr = +el.getAttribute('data-thumb');\n\n        // console.log(thumbDataAttr);\n\n        if (thumbDataAttr === index) {\n\n          el.classList.toggle('is-active');\n        }\n      });\n    }\n  }, {\n    key: 'moveThumbnails',\n    value: function moveThumbnails() {\n\n      var self = this;\n      var index = self.currentIndex;\n      var left = index * self.thumbnails.itemWidth + 5;\n\n      var totalWidth = self.thumbnails.width;\n      var visibleWidth = 600;\n      var stopPoint = totalWidth - visibleWidth;\n\n      // console.log(left,totalWidth,visibleWidth,stopPoint);\n\n      if (left >= stopPoint) {\n\n        left = stopPoint;\n      }\n\n      var positionLeft = 'calc( -' + left + 'px' + ' + 15px)';\n\n      self.thumbnails.list.style.left = positionLeft;\n    }\n  }, {\n    key: 'toggleLoader',\n    value: function toggleLoader(initial) {\n\n      var self = this;\n\n      var container = document.querySelector(self.galleryWrapper);\n\n      // console.log(container);\n\n      var loaderWrapper = [].slice.call(container.children).find(function (el) {\n\n        if (el.classList.contains('js-loader-wrapper')) return el;\n      });\n\n      var loader = [].slice.call(loaderWrapper.children).find(function (el) {\n\n        if (el.classList.contains('loader')) return el;\n      });\n\n      // console.log(loader);\n\n      loader.classList.toggle('is-active');\n\n      return true;\n    }\n  }]);\n\n  return Gallery;\n}();\n\nexports.default = Gallery;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n(function (ELEMENT) {\n  ELEMENT.matches = ELEMENT.matches || ELEMENT.mozMatchesSelector || ELEMENT.msMatchesSelector || ELEMENT.oMatchesSelector || ELEMENT.webkitMatchesSelector;\n  ELEMENT.closest = ELEMENT.closest || function closest(selector) {\n    if (!this) return null;\n    if (this.matches(selector)) return this;\n    if (!this.parentElement) {\n      return null;\n    } else return this.parentElement.closest(selector);\n  };\n})(Element.prototype);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvanMvcG9seWZpbGxzLmpzPzlkYTYiXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKEVMRU1FTlQpIHtcclxuICBFTEVNRU5ULm1hdGNoZXMgPSBFTEVNRU5ULm1hdGNoZXMgfHwgRUxFTUVOVC5tb3pNYXRjaGVzU2VsZWN0b3IgfHwgRUxFTUVOVC5tc01hdGNoZXNTZWxlY3RvciB8fCBFTEVNRU5ULm9NYXRjaGVzU2VsZWN0b3IgfHwgRUxFTUVOVC53ZWJraXRNYXRjaGVzU2VsZWN0b3I7XHJcbiAgRUxFTUVOVC5jbG9zZXN0ID0gRUxFTUVOVC5jbG9zZXN0IHx8IGZ1bmN0aW9uIGNsb3Nlc3Qoc2VsZWN0b3IpIHtcclxuICAgIGlmICghdGhpcykgcmV0dXJuIG51bGw7XHJcbiAgICBpZiAodGhpcy5tYXRjaGVzKHNlbGVjdG9yKSkgcmV0dXJuIHRoaXM7XHJcbiAgICBpZiAoIXRoaXMucGFyZW50RWxlbWVudCkge3JldHVybiBudWxsO31cclxuICAgIGVsc2UgcmV0dXJuIHRoaXMucGFyZW50RWxlbWVudC5jbG9zZXN0KHNlbGVjdG9yKTtcclxuICB9O1xyXG59KEVsZW1lbnQucHJvdG90eXBlKSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gc3JjL2pzL3BvbHlmaWxscy5qcyJdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBRUE7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n__webpack_require__(1);\n\nvar _gallery = __webpack_require__(0);\n\nvar _gallery2 = _interopRequireDefault(_gallery);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar app = {\n\n  initialize: function initialize(settings) {\n\n    var gallery = new _gallery2.default(settings);\n  }\n\n};\n\napp.initialize({\n\n  galleryAmount: '10',\n  galleryItemSelector: 'js-gallery-item',\n  prevSlide: 'js-gallery-prev1',\n  nextSlide: 'js-gallery-next1',\n  container: '.js-gallery-wrap',\n  gallery: 'js-gallery',\n\n  thumbs: true\n  // loader: true,\n  // fullScreenMode: true\n\n});\n\napp.initialize({\n\n  galleryAmount: '100',\n  galleryItemSelector: 'js-gallery-item',\n  prevSlide: 'js-gallery-prev2',\n  nextSlide: 'js-gallery-next2',\n  container: '.js-gallery-wrap2',\n  gallery: 'js-gallery',\n\n  thumbs: true\n  // loader: true,\n  // fullScreenMode: true\n\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvanMvYXBwLmpzPzcxNmYiXSwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgJy4vcG9seWZpbGxzJztcblxuaW1wb3J0IEdhbGxlcnkgZnJvbSAnLi9nYWxsZXJ5JztcblxuXG5cblxuXG52YXIgYXBwID0ge1xuXG4gIGluaXRpYWxpemU6IGZ1bmN0aW9uKHNldHRpbmdzKSB7XG5cbiAgICBsZXQgZ2FsbGVyeSA9IG5ldyBHYWxsZXJ5KHNldHRpbmdzKTtcbiAgICBcbiAgICAgIFxuICB9LFxuXG5cbn07XG5cblxuYXBwLmluaXRpYWxpemUoe1xuXG4gICAgXG4gIGdhbGxlcnlBbW91bnQ6ICcxMCcsXG4gIGdhbGxlcnlJdGVtU2VsZWN0b3I6ICdqcy1nYWxsZXJ5LWl0ZW0nLFxuICBwcmV2U2xpZGU6ICdqcy1nYWxsZXJ5LXByZXYxJyxcbiAgbmV4dFNsaWRlOiAnanMtZ2FsbGVyeS1uZXh0MScsXG4gIGNvbnRhaW5lcjogJy5qcy1nYWxsZXJ5LXdyYXAnLFxuICBnYWxsZXJ5OiAnanMtZ2FsbGVyeScsXG4gXG4gIHRodW1iczogdHJ1ZVxuICAvLyBsb2FkZXI6IHRydWUsXG4gIC8vIGZ1bGxTY3JlZW5Nb2RlOiB0cnVlXG5cbn0pO1xuXG5cbmFwcC5pbml0aWFsaXplKHtcblxuICAgIFxuICBnYWxsZXJ5QW1vdW50OiAnMTAwJyxcbiAgZ2FsbGVyeUl0ZW1TZWxlY3RvcjogJ2pzLWdhbGxlcnktaXRlbScsXG4gIHByZXZTbGlkZTogJ2pzLWdhbGxlcnktcHJldjInLFxuICBuZXh0U2xpZGU6ICdqcy1nYWxsZXJ5LW5leHQyJyxcbiAgY29udGFpbmVyOiAnLmpzLWdhbGxlcnktd3JhcDInLFxuICBnYWxsZXJ5OiAnanMtZ2FsbGVyeScsXG4gXG4gIHRodW1iczogdHJ1ZVxuICAvLyBsb2FkZXI6IHRydWUsXG4gIC8vIGZ1bGxTY3JlZW5Nb2RlOiB0cnVlXG5cbn0pO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHNyYy9qcy9hcHAuanMiXSwibWFwcGluZ3MiOiI7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFSQTtBQUNBO0FBWUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFiQTtBQUNBO0FBZ0JBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBYkEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2\n");

/***/ })
/******/ ]);