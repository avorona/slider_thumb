/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "js/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 2);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// send request\n// initialize slider\n// inititalize thumbnails\n// add navigation\n// add loader\n// check for reusable\n// +bonus: add smooth fade in/ fade out \n// +bonus create buttons on the fly\n\n\n// При загрузке страницы:\n\n// 1.ajax-запрос на картинки \n// 2.принять запрос, вырезать первые пять [0...5]\n// 3. создать оболочку и список для элементов галлереи\n// 4. Создать пять элементов галлереи\n// 5. создать кнопки управления галлерей\n// 6. создать миниатюры для этих пяти картинок\n\n\n// При нажатии на кнопку даллеЖ\n\n\n// 1. вырезать из запроса следующие пять картинок [5...10]\n// 2. создать следующие пять элементов галлереи\n// 3. создать миниатюры для этих пяти картинок\n\n// Ограничения:\n\n// --когда достигнут предел картинок, остановиться и ничего не создавать\n// --когда грузяться следующие пять картинок, показать прелоадер\n\n\n// фичи:\n\n// проклацывание по миниатюрам больших фото\n// увеличенные фото на весь экран при нажатии на большое фото\n\n\nvar Gallery = function () {\n  function Gallery(settings) {\n    _classCallCheck(this, Gallery);\n\n    this.settings = settings;\n    this.id = 0;\n    this.dataAmount = settings.galleryAmount;\n    this.startOfDataSet = 0;\n    this.numberOfDataItems = 5;\n    this.portionOfData = [];\n    this.data = [];\n    this.galleryWrapper = settings.container;\n    this.gallery = settings.gallery;\n    // this.galleryList;\n    this.galleryItemToSlide = settings.galleryItemSelector;\n    this.prevSlideBtn = settings.prevSlide || 'js-gallery-prev';\n    this.nextSlideBtn = settings.nextSlide || 'js-gallery-next';\n    this.currentSlide = 0 || settings.initialSlide;\n    this.currentIndex = 0;\n    this.thumbsHeight = 100;\n    this.thumbsItemWidth = 1.15 * this.thumbsHeight;\n    this.thumbsWidth = 0;\n    this.thumbsListWidth = 0;\n    this.thumbTriggers = [];\n    this.thumbsListPosition = 0;\n  }\n\n  _createClass(Gallery, [{\n    key: 'initialize',\n    value: function initialize() {\n      this.getData(0);\n    }\n  }, {\n    key: 'createCORSRequest',\n    value: function createCORSRequest(method, url) {\n\n      var xhr = new XMLHttpRequest();\n      if ('withCredentials' in xhr) {\n\n        // Check if the XMLHttpRequest object has a \"withCredentials\" property.\n        // \"withCredentials\" only exists on XMLHTTPRequest2 objects.\n        xhr.open(method, url, true);\n      } else if (typeof XDomainRequest != 'undefined') {\n\n        // Otherwise, check if XDomainRequest.\n        // XDomainRequest only exists in IE, and is IE's way of making CORS requests.\n        xhr = new XDomainRequest();\n        xhr.open(method, url);\n      } else {\n\n        // Otherwise, CORS is not supported by the browser.\n        xhr = null;\n      }\n      // console.log(xhr);\n      return xhr;\n    }\n  }, {\n    key: 'getData',\n    value: function getData() {\n\n      var self = this;\n\n      var url = 'images.json';\n\n      var xhr = self.createCORSRequest('GET', url);\n\n      if (!xhr) {\n        throw new Error('CORS not supported');\n      }\n\n      // Response handlers.\n      xhr.onload = function () {\n        var responseText = xhr.responseText;\n\n        self.handleResponse(responseText);\n        // console.log(parsedJSON);\n\n      };\n\n      xhr.onerror = function () {\n\n        console.log('Woops, there was an error making the request.');\n      };\n\n      xhr.send();\n    }\n  }, {\n    key: 'handleResponse',\n    value: function handleResponse(response) {\n      var self = this;\n\n      self.response = response;\n\n      self.initiateData(response);\n\n      self.showData();\n    }\n  }, {\n    key: 'showData',\n    value: function showData() {\n\n      var self = this;\n\n      var galleryItems = self.portionOfData;\n\n      var galleryContainer = [].slice.call(document.querySelectorAll(this.galleryWrapper));\n\n      galleryContainer.forEach(function (el) {\n\n        self.fillGallery(el, galleryItems);\n\n        self.addThumbs(el, galleryItems);\n      });\n    }\n  }, {\n    key: 'initiateData',\n    value: function initiateData(imagesString) {\n\n      var self = this;\n\n      // console.log(secondary)\n\n\n      var items = JSON.parse(imagesString);\n\n      var limittedArray = items.slice(0, this.dataAmount);\n\n      // console.log(limittedArray);\n\n\n      limittedArray.map(function (el) {\n\n        self.data.push(el);\n      });\n\n      self.sliceDataOnPortions();\n    }\n  }, {\n    key: 'sliceDataOnPortions',\n    value: function sliceDataOnPortions(imageItems, secondary) {\n\n      var self = this;\n      var items = self.data;\n\n      var step = 5;\n\n      if (secondary) {\n\n        if (this.startOfDataSet < items.length - step) {\n          this.startOfDataSet += secondary;\n          this.numberOfDataItems = this.startOfDataSet + step;\n\n          var portionArray = items.slice(this.startOfDataSet, this.numberOfDataItems);\n\n          portionArray.map(function (el) {\n\n            self.portionOfData.push(el);\n          });\n        } else {\n\n          self.portionOfData = 0;\n        }\n      } else {\n        this.numberOfDataItems = this.startOfDataSet + step;\n        var _portionArray = items.slice(this.startOfDataSet, this.numberOfDataItems);\n\n        _portionArray.map(function (el) {\n\n          self.portionOfData.push(el);\n        });\n      }\n\n      // // if(secondary) { items=self.portionOfData; }\n      // console.log(this.startOfDataSet, this.numberOfDataItems);\n      // console.log(items);\n\n\n      console.log(self.portionOfData);\n    }\n  }, {\n    key: 'fillGallery',\n    value: function fillGallery(el, data) {\n\n      var galleryId = this.id;\n      galleryId++;\n\n      var items = data;\n      var itemsAmount = items.length;\n\n      var galleryContainer = el;\n      var galleryMinHeight = el.offsetHeight;\n\n      // console.log(el,galleryMinHeight);\n\n      var gallery = document.createElement('div');\n\n      gallery.classList.add('gallery', 'js-gallery');\n      gallery.style.minHeight = galleryMinHeight - this.thumbsHeight + 'px';\n\n      galleryContainer.appendChild(gallery);\n\n      this.thumbsWidth = gallery.offsetWidth;\n\n      var galleryList = document.createElement('ul');\n\n      galleryList.classList.add('gallery__list', 'js-gallery-list');\n      galleryList.style.minHeight = galleryMinHeight - this.thumbsHeight + 'px';\n\n      self.galleryList = galleryList;\n\n      this.addItemsToGallery(galleryList, items);\n\n      // this.addBtnToGallery(galleryContainer);\n\n      this.thumbsListWidth = this.thumbsItemWidth * (itemsAmount + 1);\n\n      // console.log(galleryList);\n\n      gallery.appendChild(galleryList);\n\n      this.navigation(galleryContainer, galleryList);\n    }\n  }, {\n    key: 'addItemsToGallery',\n    value: function addItemsToGallery(list, items) {\n\n      var galleryList = list;\n      var data = items;\n      var dataLength = data.length;\n      var galleryMaxWidth = this.thumbsWidth;\n\n      for (var j = 0; j < dataLength; j++) {\n\n        var galleryItem = document.createElement('li');\n        galleryItem.classList.add('gallery__item', 'js-gallery-item');\n\n        var galleryItemID = 'slide' + data[j].id;\n        galleryItem.setAttribute('id', galleryItemID);\n\n        galleryItem.style.maxWidth = galleryMaxWidth + 'px';\n\n        galleryItem.innerHTML = '<img src=\"' + data[j].url + '\" class=\"gallery__img\"> ';\n\n        galleryList.appendChild(galleryItem);\n      }\n    }\n  }, {\n    key: 'navigation',\n    value: function navigation(galleryContainer, galleryList) {\n\n      var self = this;\n\n      var thisGalleryWrapper = galleryContainer;\n      var thisGalleryList = galleryList;\n      var prevBtn = void 0,\n          nextBtn = void 0;\n\n      var thisGalleryChildren = [].slice.call(thisGalleryWrapper.children);\n\n      // console.log(thisGalleryChildren);\n\n\n      if (self.prevSlideBtn === 'js-gallery-prev' && self.nextSlideBtn === 'js-gallery-next') {\n\n        thisGalleryWrapper.classList.add('add-controllers');\n\n        prevBtn = document.createElement('div');\n        prevBtn.classList.add('control-btn', 'control-btn__left', 'js-gallery-prev');\n\n        prevBtn.innerHTML = '<button class=\"icon-btn icon-btn_left\"></button>';\n\n        nextBtn = document.createElement('div');\n        nextBtn.classList.add('control-btn', 'control-btn__right', 'js-gallery-next');\n\n        nextBtn.innerHTML = '<button class=\"icon-btn icon-btn_right\"></button>';\n\n        thisGalleryWrapper.appendChild(prevBtn);\n        thisGalleryWrapper.appendChild(nextBtn);\n      } else {\n\n        nextBtn = thisGalleryChildren.filter(function (el) {\n\n          if (el.classList.contains(self.nextSlideBtn)) {\n            return el;\n          }\n        });\n\n        // console.log(nextSlideButton);\n\n\n        prevBtn = thisGalleryChildren.filter(function (el) {\n\n          if (el.classList.contains(self.prevSlideBtn)) {\n            return el;\n          }\n        });\n      }\n\n      // console.log(prevSlideButton);\n\n      var gallery = thisGalleryChildren.filter(function (el) {\n\n        if (el.classList.contains(self.gallery)) {\n          return el;\n        }\n      });\n\n      var slidesNodeList = thisGalleryList.childNodes;\n      // console.log(thisGalleryList);\n\n      var slides = [].slice.call(slidesNodeList);\n\n      var firstSlides = slides.filter(function (el) {\n\n        if (el.getAttribute('id') === 'slide1') return el;\n      });\n\n      // console.log(firstSlides);\n\n      firstSlides.forEach(function (el) {\n\n        el.classList.add('is-visible');\n      });\n\n      this.nextSlide(slides, nextBtn, thisGalleryList);\n\n      this.prevSlide(slides, prevBtn, thisGalleryList);\n    }\n  }, {\n    key: 'nextSlide',\n    value: function nextSlide(allSlides, nextBtn, galleryList) {\n      var self = this;\n\n      var nextSlideBtn = nextBtn;\n      var slides = allSlides;\n\n      var currentSlide = slides.filter(function (el) {\n\n        if (el.classList.contains('is-visible')) {\n          return el;\n        }\n      });\n\n      currentSlide.forEach(function (element, index, array) {\n\n        self.currentIndex = slides.indexOf(array[index]);\n\n        // console.log(slides,currentSlide,self.currentIndex);\n\n\n        nextSlideBtn.forEach(function (e) {\n\n          // console.log(slides,currentSlide);\n\n          e.addEventListener('click', function (event) {\n            var items = self.portionOfData;\n            var itemsLength = items.length;\n            var list = galleryList;\n\n            // self.startOfDataSet += 5;\n\n            self.sliceDataOnPortions(self.portionOfData, 5);\n            self.addItemsToGallery(list, items, itemsLength);\n\n            slides[self.currentIndex].classList.toggle('is-visible');\n\n            self.currentIndex = (self.currentIndex + 1) % slides.length;\n\n            slides[self.currentIndex].classList.toggle('is-visible');\n\n            // console.log(self.currentIndex);\n            self.changeThumbnails();\n          });\n        });\n      });\n    }\n  }, {\n    key: 'prevSlide',\n    value: function prevSlide(allSlides, prevBtn, galleryList) {\n\n      var self = this;\n      var slides = allSlides;\n      var lastSlide = slides.length - 1;\n\n      var prevSlideBtn = prevBtn;\n\n      var currentSlider = slides.filter(function (el) {\n\n        if (el.classList.contains('is-visible')) {\n          return el;\n        }\n      });\n\n      currentSlider.forEach(function (element, index, array) {\n\n        self.currentIndex = slides.indexOf(array[index]);\n\n        prevSlideBtn.forEach(function (el) {\n\n          el.addEventListener('click', function (event) {\n\n            // console.log(slides);\n\n            slides[self.currentIndex].classList.toggle('is-visible');\n\n            if (self.currentIndex <= 0) {\n\n              self.currentIndex = lastSlide;\n            } else if (self.currentIndex > 0 && self.currentIndex <= lastSlide) {\n\n              self.currentIndex--;\n            }\n\n            slides[self.currentIndex].classList.toggle('is-visible');\n\n            console.log(self.currentIndex);\n            self.changeThumbnails();\n          });\n        });\n      });\n    }\n  }, {\n    key: 'addThumbs',\n    value: function addThumbs(galleryContainer, galleryItems) {\n\n      var self = this;\n      var data = galleryItems;\n      var container = galleryContainer;\n\n      var thumbsUrl = data.map(function (el) {\n\n        return el.thumbnailUrl;\n      });\n\n      var thumbsHTML = document.createElement('div');\n\n      thumbsHTML.style.minHeight = self.thumbsHeight + 'px';\n      thumbsHTML.classList.add('g-thumbnails');\n\n      var thumbsHTMLList = document.createElement('ul');\n      var thumbsHTMLListWidth = this.thumbsListWidth;\n      thumbsHTMLList.style.width = thumbsHTMLListWidth + 'px';\n\n      var thumbsHTMLListHeight = self.thumbsHeight - 10;\n      thumbsHTMLList.style.height = thumbsHTMLListHeight + 'px';\n\n      thumbsHTMLList.classList.add('g-thumbnails__list');\n\n      this.thumbsListPosition = self.currentIndex * self.thumbsItemWidth + 5;\n\n      for (var i = 0; i < thumbsUrl.length; i++) {\n\n        var thumbsHTMLItem = document.createElement('li');\n\n        var thumbsHTMLItemWidth = this.thumbsItemWidth;\n        thumbsHTMLItem.style.width = thumbsHTMLItemWidth + 'px';\n        thumbsHTMLItem.style.height = thumbsHTMLListHeight + 'px';\n        var thumbsHTMLItemPosition = self.currentIndex * thumbsHTMLItemWidth;\n\n        thumbsHTMLItem.classList.add('g-thumbnails__item');\n\n        var thumbsHTMLItemWrap = document.createElement('div');\n        thumbsHTMLItemWrap.setAttribute('data-thumb', i);\n        thumbsHTMLItemWrap.classList.add('g-thumbnails__item-wrap', 'js-thumb-slide');\n\n        self.thumbTriggers.push(thumbsHTMLItemWrap);\n\n        thumbsHTMLItemWrap.innerHTML = '<img src=\"' + thumbsUrl[i] + '\" class=\"g-thumbnails__img\"' + ' style=\"max-width: 100%;\">';\n\n        thumbsHTMLItem.appendChild(thumbsHTMLItemWrap);\n\n        thumbsHTMLList.appendChild(thumbsHTMLItem);\n      }\n\n      // console.log(self.thumbTriggers);\n\n      thumbsHTML.appendChild(thumbsHTMLList);\n\n      // console.log(container);\n      container.appendChild(thumbsHTML);\n\n      this.moveThumbnails(thumbsHTMLList, self.currentIndex);\n\n      this.toggleThumbs();\n    }\n  }, {\n    key: 'toggleThumbs',\n    value: function toggleThumbs() {\n\n      var self = this;\n\n      var thumbTrigger = self.thumbTriggers;\n\n      // console.log(thumbTriggersList);\n\n      thumbTrigger.forEach(function (el) {\n\n        el.addEventListener('click', function (event) {\n\n          var triggerSiblingSlides = el.closest('.g-thumbnails').previousSibling.childNodes;\n\n          // console.log(triggerSiblingSlides);\n\n          var slides = triggerSiblingSlides[0].childNodes;\n\n          var indexToTrigger = +event.currentTarget.getAttribute('data-thumb');\n\n          slides[self.currentIndex].classList.toggle('is-visible');\n\n          self.currentIndex = indexToTrigger;\n\n          self.changeThumbnails();\n\n          slides[self.currentIndex].classList.toggle('is-visible');\n\n          // console.log(self.currentIndex);\n        });\n      });\n    }\n  }, {\n    key: 'changeThumbnails',\n    value: function changeThumbnails(thumbs) {\n\n      var self = this;\n\n      var thumbTrigger = self.thumbTriggers;\n      var index = self.currentIndex;\n\n      var thumbTriggersList = thumbTrigger[0].closest('.g-thumbnails__list');\n\n      self.moveThumbnails(thumbTriggersList, self.currentIndex);\n\n      thumbTrigger.forEach(function (el) {\n\n        el.classList.remove('is-active');\n\n        var thumbDataAttr = +el.getAttribute('data-thumb');\n\n        // console.log(thumbDataAttr);\n\n        if (thumbDataAttr === index) {\n\n          el.classList.toggle('is-active');\n        }\n      });\n    }\n  }, {\n    key: 'moveThumbnails',\n    value: function moveThumbnails(thumbs, index) {\n\n      var self = this;\n\n      var left = index * self.thumbsItemWidth + 5;\n\n      var totalWidth = thumbs.offsetWidth;\n      var visibleWidth = self.thumbsWidth;\n      var stopPoint = totalWidth - visibleWidth;\n\n      // console.log(left,totalWidth,visibleWidth,stopPoint);\n\n      if (left >= stopPoint) {\n\n        left = stopPoint;\n      }\n\n      var positionLeft = 'calc( -' + left + 'px' + ' + 15px)';\n\n      thumbs.style.left = positionLeft;\n    }\n  }, {\n    key: 'addLoader',\n    value: function addLoader() {}\n  }, {\n    key: 'fullScreenMode',\n    value: function fullScreenMode() {}\n  }]);\n\n  return Gallery;\n}();\n\nexports.default = Gallery;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n(function (ELEMENT) {\n  ELEMENT.matches = ELEMENT.matches || ELEMENT.mozMatchesSelector || ELEMENT.msMatchesSelector || ELEMENT.oMatchesSelector || ELEMENT.webkitMatchesSelector;\n  ELEMENT.closest = ELEMENT.closest || function closest(selector) {\n    if (!this) return null;\n    if (this.matches(selector)) return this;\n    if (!this.parentElement) {\n      return null;\n    } else return this.parentElement.closest(selector);\n  };\n})(Element.prototype);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvanMvcG9seWZpbGxzLmpzPzlkYTYiXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKEVMRU1FTlQpIHtcclxuICBFTEVNRU5ULm1hdGNoZXMgPSBFTEVNRU5ULm1hdGNoZXMgfHwgRUxFTUVOVC5tb3pNYXRjaGVzU2VsZWN0b3IgfHwgRUxFTUVOVC5tc01hdGNoZXNTZWxlY3RvciB8fCBFTEVNRU5ULm9NYXRjaGVzU2VsZWN0b3IgfHwgRUxFTUVOVC53ZWJraXRNYXRjaGVzU2VsZWN0b3I7XHJcbiAgRUxFTUVOVC5jbG9zZXN0ID0gRUxFTUVOVC5jbG9zZXN0IHx8IGZ1bmN0aW9uIGNsb3Nlc3Qoc2VsZWN0b3IpIHtcclxuICAgIGlmICghdGhpcykgcmV0dXJuIG51bGw7XHJcbiAgICBpZiAodGhpcy5tYXRjaGVzKHNlbGVjdG9yKSkgcmV0dXJuIHRoaXM7XHJcbiAgICBpZiAoIXRoaXMucGFyZW50RWxlbWVudCkge3JldHVybiBudWxsO31cclxuICAgIGVsc2UgcmV0dXJuIHRoaXMucGFyZW50RWxlbWVudC5jbG9zZXN0KHNlbGVjdG9yKTtcclxuICB9O1xyXG59KEVsZW1lbnQucHJvdG90eXBlKSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gc3JjL2pzL3BvbHlmaWxscy5qcyJdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBRUE7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n__webpack_require__(1);\n\nvar _gallery = __webpack_require__(0);\n\nvar _gallery2 = _interopRequireDefault(_gallery);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar app = {\n\n  initialize: function initialize(settings) {\n\n    var gallery = new _gallery2.default(settings);\n\n    gallery.initialize();\n  }\n\n  // getGallery: function(gallery) {\n\n  //   gallery.getData();\n\n  //   console.log('getGallery');\n  // },\n\n  // showGallery: function(galleryData) {\n\n  //   let gallery = galleryData;\n  //   console.log('showGallery');\n\n  //   gallery.showData();\n\n\n  // }\n\n};\n\napp.initialize({\n\n  galleryAmount: '10',\n  galleryItemSelector: '.js-gallery-item',\n  prevSlide: 'js-gallery-prev1',\n  nextSlide: 'js-gallery-next1',\n  container: '.js-gallery-wrap',\n  gallery: 'js-gallery',\n\n  thumbs: true\n  // loader: true,\n  // fullScreenMode: true\n\n});\n\napp.initialize({\n\n  galleryAmount: '100',\n  galleryItemSelector: '.js-gallery-item',\n  prevSlide: 'js-gallery-prev2',\n  nextSlide: 'js-gallery-next2',\n  container: '.js-gallery-wrap2',\n  gallery: 'js-gallery',\n\n  thumbs: true\n  // loader: true,\n  // fullScreenMode: true\n\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvanMvYXBwLmpzPzcxNmYiXSwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgJy4vcG9seWZpbGxzJztcblxuaW1wb3J0IEdhbGxlcnkgZnJvbSAnLi9nYWxsZXJ5JztcblxuXG5cblxuXG52YXIgYXBwID0ge1xuXG4gIGluaXRpYWxpemU6IGZ1bmN0aW9uKHNldHRpbmdzKSB7XG5cbiAgICBsZXQgZ2FsbGVyeSA9IG5ldyBHYWxsZXJ5KHNldHRpbmdzKTtcbiAgICBcbiAgICBnYWxsZXJ5LmluaXRpYWxpemUoKTtcbiAgICAgIFxuICB9LFxuXG4gIC8vIGdldEdhbGxlcnk6IGZ1bmN0aW9uKGdhbGxlcnkpIHtcbiAgICAgIFxuICAvLyAgIGdhbGxlcnkuZ2V0RGF0YSgpO1xuXG4gIC8vICAgY29uc29sZS5sb2coJ2dldEdhbGxlcnknKTtcbiAgLy8gfSxcblxuICAvLyBzaG93R2FsbGVyeTogZnVuY3Rpb24oZ2FsbGVyeURhdGEpIHtcblxuICAvLyAgIGxldCBnYWxsZXJ5ID0gZ2FsbGVyeURhdGE7XG4gIC8vICAgY29uc29sZS5sb2coJ3Nob3dHYWxsZXJ5Jyk7XG5cbiAgLy8gICBnYWxsZXJ5LnNob3dEYXRhKCk7XG5cblxuICAvLyB9XG5cbn07XG5cblxuYXBwLmluaXRpYWxpemUoe1xuXG4gICAgXG4gIGdhbGxlcnlBbW91bnQ6ICcxMCcsXG4gIGdhbGxlcnlJdGVtU2VsZWN0b3I6ICcuanMtZ2FsbGVyeS1pdGVtJyxcbiAgcHJldlNsaWRlOiAnanMtZ2FsbGVyeS1wcmV2MScsXG4gIG5leHRTbGlkZTogJ2pzLWdhbGxlcnktbmV4dDEnLFxuICBjb250YWluZXI6ICcuanMtZ2FsbGVyeS13cmFwJyxcbiAgZ2FsbGVyeTogJ2pzLWdhbGxlcnknLFxuIFxuICB0aHVtYnM6IHRydWVcbiAgLy8gbG9hZGVyOiB0cnVlLFxuICAvLyBmdWxsU2NyZWVuTW9kZTogdHJ1ZVxuXG59KTtcblxuXG5hcHAuaW5pdGlhbGl6ZSh7XG5cbiAgICBcbiAgZ2FsbGVyeUFtb3VudDogJzEwMCcsXG4gIGdhbGxlcnlJdGVtU2VsZWN0b3I6ICcuanMtZ2FsbGVyeS1pdGVtJyxcbiAgcHJldlNsaWRlOiAnanMtZ2FsbGVyeS1wcmV2MicsXG4gIG5leHRTbGlkZTogJ2pzLWdhbGxlcnktbmV4dDInLFxuICBjb250YWluZXI6ICcuanMtZ2FsbGVyeS13cmFwMicsXG4gIGdhbGxlcnk6ICdqcy1nYWxsZXJ5JyxcbiBcbiAgdGh1bWJzOiB0cnVlXG4gIC8vIGxvYWRlcjogdHJ1ZSxcbiAgLy8gZnVsbFNjcmVlbk1vZGU6IHRydWVcblxufSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gc3JjL2pzL2FwcC5qcyJdLCJtYXBwaW5ncyI6Ijs7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBMUJBO0FBQ0E7QUE2QkE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFiQTtBQUNBO0FBZ0JBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBYkEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2\n");

/***/ })
/******/ ]);