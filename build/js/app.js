/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "js/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 2);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// send request\n// initialize slider\n// inititalize thumbnails\n// add navigation\n// add loader\n// check for reusable\n// +bonus: add smooth fade in/ fade out \n// +bonus create buttons on the fly\n\n\n// При загрузке страницы:\n\n// 1.ajax-запрос на картинки   ==+!+==\n// 2.принять запрос, вырезать первые пять [0...5]  ==+!+==\n// 3. создать оболочку и список для элементов галлереи  ==+!+==\n// 4. Создать пять элементов галлереи  ==+!+==\n// 5. создать кнопки управления галлерей  ==+!+==\n// 6. создать миниатюры для этих пяти картинок  ==+!+==\n\n\n// При нажатии на кнопку даллеЖ\n\n\n// 1. вырезать из запроса следующие пять картинок [5...10]  ==+!+==\n// 2. создать следующие пять элементов галлереи  ==+!+==\n// 3. создать миниатюры для этих пяти картинок  ==+!+==\n\n// Ограничения:\n\n// --когда достигнут предел картинок, остановиться и ничего не создавать ==+!+==\n// \n\n\n// фичи:\n\n// проклацывание по миниатюрам больших фото ==+!+==\n// увеличенные фото на весь экран при нажатии на большое фото\n// когда грузяться следующие пять картинок, показать прелоадер\n\n\nvar Gallery = function () {\n  function Gallery(settings) {\n    _classCallCheck(this, Gallery);\n\n    this.settings = settings;\n    this.dataAmount = settings.galleryAmount;\n    this.galleryWrapper = settings.container;\n    this.parsedResponse = [];\n    this.data = [];\n    this.portionOfData = [];\n    this.dataSet = {\n      start: 0,\n      step: 5,\n      end: 0,\n      totalLength: 0\n    };\n\n    this.thumbnails = {\n\n      height: 100,\n      width: 0,\n      itemWidth: 114,\n      list: 0,\n      listHeight: 90,\n      url: [],\n      triggers: []\n    };\n    this.gallery = {\n      width: 0,\n      items: [],\n      prevBtnSelector: settings.prevSlide || false,\n      prevBtnNode: 0,\n      nextBtnSelector: settings.nextSlide || false,\n      nextBtnNode: 0\n    };\n    this.galleryList;\n    this.currentIndex = 0;\n\n    this.initialLoad();\n  }\n\n  _createClass(Gallery, [{\n    key: 'initialLoad',\n    value: function initialLoad() {\n\n      // 1.ajax-запрос на картинки \n      // 2.принять запрос,\n      //2.2. вырезать указанное количество картинок\n      //2.5 отобразить первые пять [0...5]\n      // 3. создать оболочку и список для элементов галлереи\n      // 4. Создать пять элементов галлереи\n      // 5. создать кнопки управления галлерей\n      // 6. создать миниатюры для этих пяти картинок\n\n\n      this.fetch(true);\n    }\n  }, {\n    key: 'secondaryLoad',\n    value: function secondaryLoad() {\n\n      this.initiateData(true);\n    }\n  }, {\n    key: 'createCORSRequest',\n    value: function createCORSRequest(method, url) {\n\n      var xhr = new XMLHttpRequest();\n      if ('withCredentials' in xhr) {\n\n        // Check if the XMLHttpRequest object has a \"withCredentials\" property.\n        // \"withCredentials\" only exists on XMLHTTPRequest2 objects.\n        xhr.open(method, url, true);\n      } else if (typeof XDomainRequest != 'undefined') {\n\n        // Otherwise, check if XDomainRequest.\n        // XDomainRequest only exists in IE, and is IE's way of making CORS requests.\n        xhr = new XDomainRequest();\n        xhr.open(method, url);\n      } else {\n\n        // Otherwise, CORS is not supported by the browser.\n        xhr = null;\n      }\n      // console.log(xhr);\n      return xhr;\n    }\n  }, {\n    key: 'fetch',\n    value: function fetch() {\n\n      var self = this;\n\n      var url = 'images.json';\n\n      var xhr = self.createCORSRequest('GET', url);\n\n      if (!xhr) {\n        throw new Error('CORS not supported');\n      }\n\n      // Response handlers.\n      xhr.onload = function () {\n        var responseText = xhr.responseText;\n\n        self.handleResponse(responseText);\n      };\n\n      xhr.onerror = function () {\n\n        console.log('Woops, there was an error making the request.');\n      };\n\n      xhr.send();\n    }\n  }, {\n    key: 'handleResponse',\n    value: function handleResponse(response) {\n\n      this.parsedResponse = JSON.parse(response);\n\n      this.initiateData();\n    }\n  }, {\n    key: 'initiateData',\n    value: function initiateData(secondary) {\n\n      var status = secondary || false;\n\n      var self = this;\n\n      if (status) {\n\n        self.sliceDataOnPortions(status);\n        self.showData(true);\n      } else {\n\n        var items = self.parsedResponse;\n        // console.log(items);\n        var limittedArray = items.slice(0, this.dataAmount);\n\n        limittedArray.map(function (el) {\n\n          self.data.push(el);\n        });\n\n        self.sliceDataOnPortions();\n        self.showData();\n      }\n    }\n  }, {\n    key: 'sliceDataOnPortions',\n    value: function sliceDataOnPortions(secondary) {\n\n      var status = secondary || false;\n      var self = this;\n      var items = self.data;\n\n      var step = this.dataSet.step;\n      var start = this.dataSet.start;\n      var end = this.dataSet.end;\n\n      end = start + step;\n\n      self.dataSet.totalLength = end;\n      // console.log(self.dataSet.totalLength);\n\n\n      if (status) {\n        console.log(start, items.length, step);\n\n        if (start < items.length - step) {\n\n          // console.log(items.length);\n\n          start += step;\n          end = start + step;\n\n          // console.log(start, end);\n\n          var portionArray = items.slice(start, end);\n\n          self.portionOfData.length = 0;\n\n          portionArray.map(function (el) {\n\n            self.portionOfData.push(el);\n          });\n\n          this.dataSet.start = start;\n          this.dataSet.end = end;\n        } else {\n\n          self.portionOfData.length = 0;\n        }\n      } else {\n\n        var _portionArray = items.slice(start, end);\n\n        _portionArray.map(function (el) {\n\n          self.portionOfData.push(el);\n        });\n      }\n    }\n  }, {\n    key: 'showData',\n    value: function showData(secondary) {\n\n      var status = secondary || false;\n\n      var self = this;\n\n      var galleryContainer = [].slice.call(document.querySelectorAll(this.galleryWrapper));\n\n      galleryContainer.forEach(function (el) {\n\n        self.fillGallery(el, status);\n\n        self.addThumbs(el, status);\n      });\n    }\n  }, {\n    key: 'fillGallery',\n    value: function fillGallery(galleryContainer, secondary) {\n\n      var status = secondary || false;\n      var self = this;\n      var items = self.portionOfData;\n      var container = galleryContainer;\n\n      if (!status) {\n\n        var itemsAmount = self.totalLength;\n        var galleryMinHeight = container.offsetHeight;\n        var thumbnailsHeight = this.thumbnails.height;\n        // console.log(el,galleryMinHeight);\n\n        var gallery = document.createElement('div');\n\n        gallery.classList.add('gallery', 'js-gallery');\n\n        var galleryHeight = galleryMinHeight - thumbnailsHeight;\n        gallery.style.minHeight = galleryHeight + 'px';\n\n        container.appendChild(gallery);\n\n        var galleryWidth = gallery.offsetWidth;\n\n        self.gallery.width = galleryWidth;\n\n        var galleryList = document.createElement('ul');\n\n        galleryList.classList.add('gallery__list', 'js-gallery-list');\n        galleryList.style.minHeight = galleryHeight + 'px';\n\n        self.galleryList = galleryList;\n\n        this.thumbnails.width = this.thumbnails.itemWidth * (itemsAmount + 1);\n\n        this.addItemsToGallery(galleryList, items);\n        self.showFirstItems(galleryList);\n        // console.log(galleryList, items);\n\n        gallery.appendChild(galleryList);\n\n        this.navigation(container);\n      } else {\n\n        // console.log(self.galleryList);\n        self.addItemsToGallery(self.galleryList, items);\n      }\n    }\n  }, {\n    key: 'addItemsToGallery',\n    value: function addItemsToGallery(list, items) {\n\n      var self = this;\n\n      // console.log(list);\n\n      var galleryList = list;\n      var data = items;\n      var dataLength = data.length;\n      var galleryMaxWidth = this.gallery.width;\n\n      self.dataSet.totalLength += data.length;\n\n      for (var j = 0; j < dataLength; j++) {\n\n        var galleryItem = document.createElement('li');\n        galleryItem.classList.add('gallery__item', 'js-gallery-item');\n\n        var galleryItemID = 'slide' + data[j].id;\n        galleryItem.setAttribute('id', galleryItemID);\n\n        galleryItem.style.maxWidth = galleryMaxWidth + 'px';\n\n        galleryItem.innerHTML = '<img src=\"' + data[j].url + '\" class=\"gallery__img\"> ';\n\n        galleryList.appendChild(galleryItem);\n      }\n\n      var slidesNodeList = list.childNodes;\n\n      // console.log(slidesNodeList);\n\n      var slides = [].slice.call(slidesNodeList);\n\n      // console.log(slides);\n\n      self.gallery.items = slides;\n    }\n  }, {\n    key: 'showFirstItems',\n    value: function showFirstItems(list) {\n\n      var self = this;\n\n      var slides = self.gallery.items;\n\n      var firstSlides = slides.filter(function (el) {\n\n        if (el.getAttribute('id') === 'slide1') return el;\n      });\n\n      firstSlides.forEach(function (el) {\n\n        el.classList.add('is-visible');\n      });\n    }\n  }, {\n    key: 'navigation',\n    value: function navigation(galleryContainer) {\n\n      var self = this;\n      var thisGalleryWrapper = galleryContainer;\n      var thisGalleryList = this.galleryList;\n      var prevBtn = void 0,\n          nextBtn = void 0;\n\n      var thisGalleryChildren = [].slice.call(thisGalleryWrapper.children);\n\n      // console.log(thisGalleryChildren);\n\n      // console.log(status);\n\n      if (!self.gallery.prevBtnSelector && !self.gallery.nextBtnSelector) {\n\n        thisGalleryWrapper.classList.add('add-controllers');\n\n        prevBtn = document.createElement('div');\n        prevBtn.classList.add('control-btn', 'control-btn__left', 'js-gallery-prev');\n\n        prevBtn.innerHTML = '<button class=\"icon-btn icon-btn_left\"></button>';\n\n        nextBtn = document.createElement('div');\n        nextBtn.classList.add('control-btn', 'control-btn__right', 'js-gallery-next');\n\n        nextBtn.innerHTML = '<button class=\"icon-btn icon-btn_right\"></button>';\n\n        thisGalleryWrapper.appendChild(prevBtn);\n        thisGalleryWrapper.appendChild(nextBtn);\n      } else {\n\n        nextBtn = thisGalleryChildren.filter(function (el) {\n\n          if (el.classList.contains(self.gallery.nextBtnSelector)) {\n            return el;\n          }\n        });\n\n        // console.log(nextSlideButton);\n\n\n        prevBtn = thisGalleryChildren.filter(function (el) {\n\n          if (el.classList.contains(self.gallery.prevBtnSelector)) {\n            return el;\n          }\n        });\n      }\n\n      self.gallery.prevBtnNode = prevBtn;\n      self.gallery.nextBtnNode = nextBtn;\n\n      this.nextSlide();\n\n      this.prevSlide();\n    }\n  }, {\n    key: 'nextSlide',\n    value: function nextSlide() {\n\n      var self = this;\n      var nextSlideBtn = self.gallery.nextBtnNode;\n\n      // console.log(slides,currentSlide,self.currentIndex);\n\n\n      nextSlideBtn.forEach(function (e) {\n\n        // console.log(slides,currentSlide);\n\n        e.addEventListener('click', function () {\n\n          var slides = self.gallery.items;\n\n          console.log(self.gallery.items);\n\n          var currentSlide = slides.filter(function (el) {\n\n            if (el.classList.contains('is-visible')) {\n              return el;\n            }\n          });\n\n          currentSlide.forEach(function (element, index, array) {\n\n            self.currentIndex = slides.indexOf(array[index]);\n\n            self.secondaryLoad();\n\n            slides[self.currentIndex].classList.toggle('is-visible');\n\n            self.currentIndex = (self.currentIndex + 1) % slides.length;\n\n            slides[self.currentIndex].classList.toggle('is-visible');\n\n            // console.log(self.currentIndex);\n            self.changeThumbnails();\n          });\n        });\n      });\n    }\n  }, {\n    key: 'prevSlide',\n    value: function prevSlide() {\n\n      var self = this;\n      var slides = self.gallery.items;\n      var lastSlide = slides.length - 1;\n      var prevSlideBtn = self.gallery.prevBtnNode;\n\n      var currentSlider = slides.filter(function (el) {\n\n        if (el.classList.contains('is-visible')) {\n          return el;\n        }\n      });\n\n      currentSlider.forEach(function (element, index, array) {\n\n        self.currentIndex = slides.indexOf(array[index]);\n\n        prevSlideBtn.forEach(function (el) {\n\n          el.addEventListener('click', function () {\n\n            // console.log(slides);\n\n            slides[self.currentIndex].classList.toggle('is-visible');\n\n            if (self.currentIndex <= 0) {\n\n              self.currentIndex = lastSlide;\n            } else if (self.currentIndex > 0 && self.currentIndex <= lastSlide) {\n\n              self.currentIndex--;\n            }\n\n            slides[self.currentIndex].classList.toggle('is-visible');\n\n            // console.log(self.currentIndex);\n            self.changeThumbnails();\n          });\n        });\n      });\n    }\n  }, {\n    key: 'addThumbs',\n    value: function addThumbs(galleryContainer, secondary) {\n\n      var self = this;\n      var status = secondary || false;\n      var data = self.portionOfData;\n      var container = galleryContainer;\n\n      self.thumbnails.url = data.map(function (el) {\n\n        return el.thumbnailUrl;\n      });\n\n      if (!status) {\n\n        var thumbs = document.createElement('div');\n\n        thumbs.style.minHeight = self.thumbsHeight + 'px';\n        thumbs.classList.add('g-thumbnails');\n\n        var thumbsList = document.createElement('ul');\n        var thumbsListWidth = self.thumbnails.width;\n        thumbsList.style.width = thumbsListWidth + 'px';\n\n        var thumbsListHeight = self.thumbsListHeight;\n        thumbsList.style.height = thumbsListHeight + 'px';\n\n        thumbsList.classList.add('g-thumbnails__list');\n\n        self.thumbnails.list = thumbsList;\n\n        this.addThumbsItem();\n\n        thumbs.appendChild(thumbsList);\n\n        // console.log(container);\n        container.appendChild(thumbs);\n\n        this.moveThumbnails();\n\n        this.toggleThumbs();\n      } else {\n\n        this.addThumbsItem();\n\n        this.moveThumbnails();\n\n        this.toggleThumbs();\n      }\n    }\n  }, {\n    key: 'addThumbsItem',\n    value: function addThumbsItem() {\n\n      var self = this;\n      var thumbs = self.thumbnails.url;\n      var data = self.portionOfData;\n      var thumbsList = self.thumbnails.list;\n      var thumbsItemWidth = this.thumbnails.itemWidth;\n      var thumbsHeight = self.thumbnails.listHeight;\n\n      // console.log(thumbs, data, thumbsHeight);  \n      for (var i = 0; i < data.length; i++) {\n\n        var thumbsItem = document.createElement('li');\n\n        thumbsItem.style.width = thumbsItemWidth + 'px';\n        thumbsItem.style.height = thumbsHeight + 'px';\n\n        thumbsItem.classList.add('g-thumbnails__item');\n\n        var equalizer = data[i].id - 1;\n\n        var thumbsItemWrap = document.createElement('div');\n        thumbsItemWrap.setAttribute('data-thumb', equalizer);\n        thumbsItemWrap.classList.add('g-thumbnails__item-wrap', 'js-thumb-slide');\n\n        self.thumbnails.triggers.push(thumbsItemWrap);\n\n        thumbsItemWrap.innerHTML = '<img src=\"' + thumbs[i] + '\" class=\"g-thumbnails__img\"' + ' style=\"max-width: 100%;\">';\n\n        thumbsItem.appendChild(thumbsItemWrap);\n\n        thumbsList.appendChild(thumbsItem);\n      }\n    }\n  }, {\n    key: 'toggleThumbs',\n    value: function toggleThumbs() {\n\n      var self = this;\n\n      var thumbTrigger = self.thumbnails.triggers;\n\n      // console.log(thumbTriggersList);\n\n      thumbTrigger.forEach(function (el) {\n\n        el.addEventListener('click', function (event) {\n\n          var triggerSiblingSlides = el.closest('.g-thumbnails').previousSibling.childNodes;\n\n          console.log(triggerSiblingSlides);\n\n          var slides = [].slice.call(triggerSiblingSlides[0].childNodes);\n\n          console.log(slides, self.currentIndex);\n\n          var indexToTrigger = +event.currentTarget.getAttribute('data-thumb');\n\n          slides[self.currentIndex].classList.toggle('is-visible');\n\n          self.currentIndex = indexToTrigger;\n\n          self.changeThumbnails();\n\n          slides[self.currentIndex].classList.toggle('is-visible');\n        });\n      });\n    }\n  }, {\n    key: 'changeThumbnails',\n    value: function changeThumbnails() {\n\n      var self = this;\n      var index = self.currentIndex;\n      var thumbTrigger = self.thumbnails.triggers;\n\n      self.moveThumbnails();\n\n      thumbTrigger.forEach(function (el) {\n\n        el.classList.remove('is-active');\n\n        var thumbDataAttr = +el.getAttribute('data-thumb');\n\n        // console.log(thumbDataAttr);\n\n        if (thumbDataAttr === index) {\n\n          el.classList.toggle('is-active');\n        }\n      });\n    }\n  }, {\n    key: 'moveThumbnails',\n    value: function moveThumbnails() {\n\n      var self = this;\n      var index = self.currentIndex;\n      var left = index * self.thumbnails.itemWidth + 5;\n\n      var totalWidth = self.thumbnails.width;\n      var visibleWidth = 600;\n      var stopPoint = totalWidth - visibleWidth;\n\n      // console.log(left,totalWidth,visibleWidth,stopPoint);\n\n      if (left >= stopPoint) {\n\n        left = stopPoint;\n      }\n\n      var positionLeft = 'calc( -' + left + 'px' + ' + 15px)';\n\n      self.thumbnails.list.style.left = positionLeft;\n    }\n  }]);\n\n  return Gallery;\n}();\n\nexports.default = Gallery;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvanMvZ2FsbGVyeS5qcz9iY2ZjIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNlbmQgcmVxdWVzdFxyXG4vLyBpbml0aWFsaXplIHNsaWRlclxyXG4vLyBpbml0aXRhbGl6ZSB0aHVtYm5haWxzXHJcbi8vIGFkZCBuYXZpZ2F0aW9uXHJcbi8vIGFkZCBsb2FkZXJcclxuLy8gY2hlY2sgZm9yIHJldXNhYmxlXHJcbi8vICtib251czogYWRkIHNtb290aCBmYWRlIGluLyBmYWRlIG91dCBcclxuLy8gK2JvbnVzIGNyZWF0ZSBidXR0b25zIG9uIHRoZSBmbHlcclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuLy8g0J/RgNC4INC30LDQs9GA0YPQt9C60LUg0YHRgtGA0LDQvdC40YbRizpcclxuXHJcbi8vIDEuYWpheC3Qt9Cw0L/RgNC+0YEg0L3QsCDQutCw0YDRgtC40L3QutC4ICAgPT0rISs9PVxyXG4vLyAyLtC/0YDQuNC90Y/RgtGMINC30LDQv9GA0L7RgSwg0LLRi9GA0LXQt9Cw0YLRjCDQv9C10YDQstGL0LUg0L/Rj9GC0YwgWzAuLi41XSAgPT0rISs9PVxyXG4vLyAzLiDRgdC+0LfQtNCw0YLRjCDQvtCx0L7Qu9C+0YfQutGDINC4INGB0L/QuNGB0L7QuiDQtNC70Y8g0Y3Qu9C10LzQtdC90YLQvtCyINCz0LDQu9C70LXRgNC10LggID09KyErPT1cclxuLy8gNC4g0KHQvtC30LTQsNGC0Ywg0L/Rj9GC0Ywg0Y3Qu9C10LzQtdC90YLQvtCyINCz0LDQu9C70LXRgNC10LggID09KyErPT1cclxuLy8gNS4g0YHQvtC30LTQsNGC0Ywg0LrQvdC+0L/QutC4INGD0L/RgNCw0LLQu9C10L3QuNGPINCz0LDQu9C70LXRgNC10LkgID09KyErPT1cclxuLy8gNi4g0YHQvtC30LTQsNGC0Ywg0LzQuNC90LjQsNGC0Y7RgNGLINC00LvRjyDRjdGC0LjRhSDQv9GP0YLQuCDQutCw0YDRgtC40L3QvtC6ICA9PSshKz09XHJcblxyXG5cclxuXHJcbi8vINCf0YDQuCDQvdCw0LbQsNGC0LjQuCDQvdCwINC60L3QvtC/0LrRgyDQtNCw0LvQu9C10JZcclxuXHJcblxyXG4vLyAxLiDQstGL0YDQtdC30LDRgtGMINC40Lcg0LfQsNC/0YDQvtGB0LAg0YHQu9C10LTRg9GO0YnQuNC1INC/0Y/RgtGMINC60LDRgNGC0LjQvdC+0LogWzUuLi4xMF0gID09KyErPT1cclxuLy8gMi4g0YHQvtC30LTQsNGC0Ywg0YHQu9C10LTRg9GO0YnQuNC1INC/0Y/RgtGMINGN0LvQtdC80LXQvdGC0L7QsiDQs9Cw0LvQu9C10YDQtdC4ICA9PSshKz09XHJcbi8vIDMuINGB0L7Qt9C00LDRgtGMINC80LjQvdC40LDRgtGO0YDRiyDQtNC70Y8g0Y3RgtC40YUg0L/Rj9GC0Lgg0LrQsNGA0YLQuNC90L7QuiAgPT0rISs9PVxyXG5cclxuLy8g0J7Qs9GA0LDQvdC40YfQtdC90LjRjzpcclxuXHJcbi8vIC0t0LrQvtCz0LTQsCDQtNC+0YHRgtC40LPQvdGD0YIg0L/RgNC10LTQtdC7INC60LDRgNGC0LjQvdC+0LosINC+0YHRgtCw0L3QvtCy0LjRgtGM0YHRjyDQuCDQvdC40YfQtdCz0L4g0L3QtSDRgdC+0LfQtNCw0LLQsNGC0YwgPT0rISs9PVxyXG4vLyBcclxuXHJcblxyXG4vLyDRhNC40YfQuDpcclxuXHJcbi8vINC/0YDQvtC60LvQsNGG0YvQstCw0L3QuNC1INC/0L4g0LzQuNC90LjQsNGC0Y7RgNCw0Lwg0LHQvtC70YzRiNC40YUg0YTQvtGC0L4gPT0rISs9PVxyXG4vLyDRg9Cy0LXQu9C40YfQtdC90L3Ri9C1INGE0L7RgtC+INC90LAg0LLQtdGB0Ywg0Y3QutGA0LDQvSDQv9GA0Lgg0L3QsNC20LDRgtC40Lgg0L3QsCDQsdC+0LvRjNGI0L7QtSDRhNC+0YLQvlxyXG4vLyDQutC+0LPQtNCwINCz0YDRg9C30Y/RgtGM0YHRjyDRgdC70LXQtNGD0Y7RidC40LUg0L/Rj9GC0Ywg0LrQsNGA0YLQuNC90L7Quiwg0L/QvtC60LDQt9Cw0YLRjCDQv9GA0LXQu9C+0LDQtNC10YBcclxuXHJcblxyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdhbGxlcnkge1xyXG5cclxuICBjb25zdHJ1Y3RvcihzZXR0aW5ncykge1xyXG5cclxuICAgIHRoaXMuc2V0dGluZ3M9c2V0dGluZ3M7XHJcbiAgICB0aGlzLmRhdGFBbW91bnQ9c2V0dGluZ3MuZ2FsbGVyeUFtb3VudDtcclxuICAgIHRoaXMuZ2FsbGVyeVdyYXBwZXI9c2V0dGluZ3MuY29udGFpbmVyO1xyXG4gICAgdGhpcy5wYXJzZWRSZXNwb25zZT1bXTtcclxuICAgIHRoaXMuZGF0YT1bXTtcclxuICAgIHRoaXMucG9ydGlvbk9mRGF0YT1bXTtcclxuICAgIHRoaXMuZGF0YVNldD0ge1xyXG4gICAgICBzdGFydDowLFxyXG4gICAgICBzdGVwOjUsXHJcbiAgICAgIGVuZDogMCxcclxuICAgICAgdG90YWxMZW5ndGg6MFxyXG4gICAgfTtcclxuICAgIFxyXG4gICAgdGhpcy50aHVtYm5haWxzID0ge1xyXG5cclxuICAgICAgaGVpZ2h0OiAxMDAsXHJcbiAgICAgIHdpZHRoOiAwLFxyXG4gICAgICBpdGVtV2lkdGg6IDExNCxcclxuICAgICAgbGlzdDowLFxyXG4gICAgICBsaXN0SGVpZ2h0OiA5MCxcclxuICAgICAgdXJsOltdLFxyXG4gICAgICB0cmlnZ2VyczogW11cclxuICAgIH07XHJcbiAgICB0aGlzLmdhbGxlcnk9IHtcclxuICAgICAgd2lkdGg6IDAsXHJcbiAgICAgIGl0ZW1zOiBbXSxcclxuICAgICAgcHJldkJ0blNlbGVjdG9yOiBzZXR0aW5ncy5wcmV2U2xpZGUgfHwgZmFsc2UsXHJcbiAgICAgIHByZXZCdG5Ob2RlOiAwLFxyXG4gICAgICBuZXh0QnRuU2VsZWN0b3I6IHNldHRpbmdzLm5leHRTbGlkZSB8fCBmYWxzZSxcclxuICAgICAgbmV4dEJ0bk5vZGU6IDBcclxuICAgIH07XHJcbiAgICB0aGlzLmdhbGxlcnlMaXN0O1xyXG4gICAgdGhpcy5jdXJyZW50SW5kZXg9MDtcclxuICAgIFxyXG4gICAgXHJcbiAgICBcclxuXHJcbiAgICB0aGlzLmluaXRpYWxMb2FkKCk7XHJcblxyXG4gIH1cclxuXHJcbiAgaW5pdGlhbExvYWQoKSB7XHJcblxyXG4gICAgLy8gMS5hamF4LdC30LDQv9GA0L7RgSDQvdCwINC60LDRgNGC0LjQvdC60LggXHJcbiAgICAvLyAyLtC/0YDQuNC90Y/RgtGMINC30LDQv9GA0L7RgSxcclxuICAgIC8vMi4yLiDQstGL0YDQtdC30LDRgtGMINGD0LrQsNC30LDQvdC90L7QtSDQutC+0LvQuNGH0LXRgdGC0LLQviDQutCw0YDRgtC40L3QvtC6XHJcbiAgICAvLzIuNSDQvtGC0L7QsdGA0LDQt9C40YLRjCDQv9C10YDQstGL0LUg0L/Rj9GC0YwgWzAuLi41XVxyXG4gICAgLy8gMy4g0YHQvtC30LTQsNGC0Ywg0L7QsdC+0LvQvtGH0LrRgyDQuCDRgdC/0LjRgdC+0Log0LTQu9GPINGN0LvQtdC80LXQvdGC0L7QsiDQs9Cw0LvQu9C10YDQtdC4XHJcbiAgICAvLyA0LiDQodC+0LfQtNCw0YLRjCDQv9GP0YLRjCDRjdC70LXQvNC10L3RgtC+0LIg0LPQsNC70LvQtdGA0LXQuFxyXG4gICAgLy8gNS4g0YHQvtC30LTQsNGC0Ywg0LrQvdC+0L/QutC4INGD0L/RgNCw0LLQu9C10L3QuNGPINCz0LDQu9C70LXRgNC10LlcclxuICAgIC8vIDYuINGB0L7Qt9C00LDRgtGMINC80LjQvdC40LDRgtGO0YDRiyDQtNC70Y8g0Y3RgtC40YUg0L/Rj9GC0Lgg0LrQsNGA0YLQuNC90L7QulxyXG5cclxuXHJcblxyXG5cclxuXHJcbiAgICB0aGlzLmZldGNoKHRydWUpO1xyXG5cclxuXHJcbiAgfVxyXG5cclxuXHJcblxyXG4gIHNlY29uZGFyeUxvYWQoKSB7XHJcblxyXG4gICAgdGhpcy5pbml0aWF0ZURhdGEodHJ1ZSk7XHJcblxyXG4gIH1cclxuXHJcbiAgY3JlYXRlQ09SU1JlcXVlc3QobWV0aG9kLCB1cmwpIHtcclxuICAgIFxyXG4gICAgbGV0IHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xyXG4gICAgaWYgKCd3aXRoQ3JlZGVudGlhbHMnIGluIHhocikge1xyXG4gICAgXHJcbiAgICAgIC8vIENoZWNrIGlmIHRoZSBYTUxIdHRwUmVxdWVzdCBvYmplY3QgaGFzIGEgXCJ3aXRoQ3JlZGVudGlhbHNcIiBwcm9wZXJ0eS5cclxuICAgICAgLy8gXCJ3aXRoQ3JlZGVudGlhbHNcIiBvbmx5IGV4aXN0cyBvbiBYTUxIVFRQUmVxdWVzdDIgb2JqZWN0cy5cclxuICAgICAgeGhyLm9wZW4obWV0aG9kLCB1cmwsIHRydWUpO1xyXG4gICAgXHJcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBYRG9tYWluUmVxdWVzdCAhPSAndW5kZWZpbmVkJykge1xyXG4gICAgXHJcbiAgICAgIC8vIE90aGVyd2lzZSwgY2hlY2sgaWYgWERvbWFpblJlcXVlc3QuXHJcbiAgICAgIC8vIFhEb21haW5SZXF1ZXN0IG9ubHkgZXhpc3RzIGluIElFLCBhbmQgaXMgSUUncyB3YXkgb2YgbWFraW5nIENPUlMgcmVxdWVzdHMuXHJcbiAgICAgIHhociA9IG5ldyBYRG9tYWluUmVxdWVzdCgpO1xyXG4gICAgICB4aHIub3BlbihtZXRob2QsIHVybCk7XHJcbiAgICBcclxuICAgIH0gZWxzZSB7XHJcbiAgICBcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBDT1JTIGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGJyb3dzZXIuXHJcbiAgICAgIHhociA9IG51bGw7XHJcbiAgICBcclxuICAgIH1cclxuICAgIC8vIGNvbnNvbGUubG9nKHhocik7XHJcbiAgICByZXR1cm4geGhyO1xyXG4gICAgXHJcbiAgICBcclxuICB9XHJcblxyXG4gIGZldGNoKCkge1xyXG5cclxuICAgIGxldCBzZWxmID0gdGhpcztcclxuICAgIFxyXG4gICAgbGV0IHVybCA9ICdpbWFnZXMuanNvbic7XHJcbiAgICBcclxuICAgIGxldCB4aHIgPSBzZWxmLmNyZWF0ZUNPUlNSZXF1ZXN0KCdHRVQnLCB1cmwpO1xyXG4gICAgXHJcbiAgICBpZiAoIXhocikge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NPUlMgbm90IHN1cHBvcnRlZCcpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyBSZXNwb25zZSBoYW5kbGVycy5cclxuICAgIHhoci5vbmxvYWQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgbGV0IHJlc3BvbnNlVGV4dCA9IHhoci5yZXNwb25zZVRleHQ7XHJcbiAgICBcclxuICAgICAgc2VsZi5oYW5kbGVSZXNwb25zZShyZXNwb25zZVRleHQpO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICB4aHIub25lcnJvciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgXHJcbiAgICAgIGNvbnNvbGUubG9nKCdXb29wcywgdGhlcmUgd2FzIGFuIGVycm9yIG1ha2luZyB0aGUgcmVxdWVzdC4nKTtcclxuICAgIH07XHJcbiAgICBcclxuICAgIHhoci5zZW5kKCk7XHJcbiAgICBcclxuICB9XHJcbiAgICBcclxuICBoYW5kbGVSZXNwb25zZShyZXNwb25zZSkge1xyXG4gICAgXHJcbiAgICBcclxuICAgIHRoaXMucGFyc2VkUmVzcG9uc2UgPSBKU09OLnBhcnNlKHJlc3BvbnNlKTtcclxuICAgIFxyXG4gICAgdGhpcy5pbml0aWF0ZURhdGEoKTtcclxuXHJcblxyXG4gIH1cclxuICAgIFxyXG4gXHJcblxyXG4gIGluaXRpYXRlRGF0YShzZWNvbmRhcnkpIHtcclxuICAgIFxyXG4gICAgbGV0IHN0YXR1cz0gc2Vjb25kYXJ5IHx8IGZhbHNlO1xyXG5cclxuICAgIGxldCBzZWxmID0gdGhpcztcclxuICAgIFxyXG4gICAgaWYgKHN0YXR1cykge1xyXG4gICAgXHJcbiAgICAgIHNlbGYuc2xpY2VEYXRhT25Qb3J0aW9ucyhzdGF0dXMpO1xyXG4gICAgICBzZWxmLnNob3dEYXRhKHRydWUpO1xyXG4gICAgXHJcbiAgICB9IGVsc2Uge1xyXG5cclxuXHJcblxyXG4gICAgICBsZXQgaXRlbXMgPSBzZWxmLnBhcnNlZFJlc3BvbnNlO1xyXG4gICAgICAvLyBjb25zb2xlLmxvZyhpdGVtcyk7XHJcbiAgICAgIGxldCBsaW1pdHRlZEFycmF5ID0gaXRlbXMuc2xpY2UoMCwgdGhpcy5kYXRhQW1vdW50KTtcclxuICAgICAgXHJcbiAgICAgIGxpbWl0dGVkQXJyYXkubWFwKGZ1bmN0aW9uKGVsKSB7XHJcbiAgICAgIFxyXG4gICAgICAgIHNlbGYuZGF0YS5wdXNoKGVsKTtcclxuICAgICAgXHJcbiAgICAgIH0pO1xyXG4gICAgICAgXHJcbiAgICAgIHNlbGYuc2xpY2VEYXRhT25Qb3J0aW9ucygpO1xyXG4gICAgICBzZWxmLnNob3dEYXRhKCk7XHJcblxyXG4gICAgfVxyXG4gXHJcbiBcclxuICB9XHJcbiAgXHJcbiAgc2xpY2VEYXRhT25Qb3J0aW9ucyhzZWNvbmRhcnkpIHtcclxuXHJcblxyXG4gICAgbGV0IHN0YXR1cz1zZWNvbmRhcnkgfHwgZmFsc2U7XHJcbiAgICBsZXQgc2VsZiA9IHRoaXM7XHJcbiAgICBsZXQgaXRlbXMgPSBzZWxmLmRhdGE7XHJcblxyXG4gICAgbGV0IHN0ZXAgPSB0aGlzLmRhdGFTZXQuc3RlcDtcclxuICAgIGxldCBzdGFydD10aGlzLmRhdGFTZXQuc3RhcnQ7XHJcbiAgICBsZXQgZW5kPXRoaXMuZGF0YVNldC5lbmQ7XHJcblxyXG4gICAgZW5kPXN0YXJ0K3N0ZXA7XHJcbiAgICBcclxuICAgIHNlbGYuZGF0YVNldC50b3RhbExlbmd0aD1lbmQ7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhzZWxmLmRhdGFTZXQudG90YWxMZW5ndGgpO1xyXG5cclxuXHJcblxyXG4gICAgaWYgKHN0YXR1cykge1xyXG4gICAgICBjb25zb2xlLmxvZyhzdGFydCxpdGVtcy5sZW5ndGgsc3RlcCk7XHJcblxyXG4gICAgICBpZiAoc3RhcnQgPCBpdGVtcy5sZW5ndGggLSBzdGVwKSB7XHJcblxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGl0ZW1zLmxlbmd0aCk7XHJcblxyXG4gICAgICAgIHN0YXJ0Kz0gc3RlcDtcclxuICAgICAgICBlbmQgPSBzdGFydCArIHN0ZXA7XHJcblxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHN0YXJ0LCBlbmQpO1xyXG5cclxuICAgICAgICBsZXQgcG9ydGlvbkFycmF5ID0gaXRlbXMuc2xpY2Uoc3RhcnQsIGVuZCk7XHJcblxyXG4gICAgICAgIHNlbGYucG9ydGlvbk9mRGF0YS5sZW5ndGg9MDtcclxuXHJcbiAgICAgICAgcG9ydGlvbkFycmF5Lm1hcChmdW5jdGlvbihlbCkgeyAgXHJcblxyXG4gICAgICAgICAgc2VsZi5wb3J0aW9uT2ZEYXRhLnB1c2goZWwpO1xyXG5cclxuICAgICAgICB9KTtcclxuICAgICAgXHJcbiAgICAgICAgdGhpcy5kYXRhU2V0LnN0YXJ0PXN0YXJ0O1xyXG4gICAgICAgIHRoaXMuZGF0YVNldC5lbmQ9ZW5kO1xyXG5cclxuXHJcbiAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgIHNlbGYucG9ydGlvbk9mRGF0YS5sZW5ndGggPSAwO1xyXG5cclxuXHJcbiAgICAgIH1cclxuXHJcbiAgICB9IGVsc2Uge1xyXG5cclxuIFxyXG5cclxuICAgICAgbGV0IHBvcnRpb25BcnJheSA9IGl0ZW1zLnNsaWNlKHN0YXJ0LCBlbmQpO1xyXG5cclxuXHJcbiAgICAgIHBvcnRpb25BcnJheS5tYXAoZnVuY3Rpb24oZWwpIHtcclxuXHJcbiAgICAgICAgc2VsZi5wb3J0aW9uT2ZEYXRhLnB1c2goZWwpO1xyXG5cclxuICAgICAgfSk7XHJcbiAgICAgIFxyXG5cclxuXHJcblxyXG4gICAgfVxyXG5cclxuXHJcbiAgfVxyXG5cclxuICBzaG93RGF0YShzZWNvbmRhcnkpIHtcclxuXHJcblxyXG4gICAgbGV0IHN0YXR1cyA9IHNlY29uZGFyeSB8fCBmYWxzZTtcclxuXHJcblxyXG4gICAgbGV0IHNlbGYgPSB0aGlzO1xyXG5cclxuXHJcbiAgICBsZXQgZ2FsbGVyeUNvbnRhaW5lciA9IFtdLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCh0aGlzLmdhbGxlcnlXcmFwcGVyKSk7XHJcblxyXG4gICAgZ2FsbGVyeUNvbnRhaW5lci5mb3JFYWNoKGZ1bmN0aW9uKGVsKSB7XHJcblxyXG5cclxuICAgICAgc2VsZi5maWxsR2FsbGVyeShlbCwgc3RhdHVzKTtcclxuXHJcblxyXG4gICAgICBzZWxmLmFkZFRodW1icyhlbCwgc3RhdHVzKTtcclxuXHJcbiAgICB9KTtcclxuXHJcbiAgfVxyXG5cclxuXHJcbiAgZmlsbEdhbGxlcnkoZ2FsbGVyeUNvbnRhaW5lciwgc2Vjb25kYXJ5KSB7XHJcbiAgICAgIFxyXG4gICAgbGV0IHN0YXR1cz1zZWNvbmRhcnkgfHwgZmFsc2U7XHJcbiAgICBsZXQgc2VsZj10aGlzO1xyXG4gICAgbGV0IGl0ZW1zID0gc2VsZi5wb3J0aW9uT2ZEYXRhO1xyXG4gICAgbGV0IGNvbnRhaW5lciA9IGdhbGxlcnlDb250YWluZXI7XHJcbiAgICAgICBcclxuICAgICAgXHJcbiAgICBpZiAoIXN0YXR1cykge1xyXG4gICAgICAgICAgIFxyXG4gICAgICBsZXQgaXRlbXNBbW91bnQgPSBzZWxmLnRvdGFsTGVuZ3RoOyAgIFxyXG4gICAgICBsZXQgZ2FsbGVyeU1pbkhlaWdodCA9IGNvbnRhaW5lci5vZmZzZXRIZWlnaHQ7XHJcbiAgICAgIGxldCB0aHVtYm5haWxzSGVpZ2h0PXRoaXMudGh1bWJuYWlscy5oZWlnaHQ7XHJcbiAgICAgIC8vIGNvbnNvbGUubG9nKGVsLGdhbGxlcnlNaW5IZWlnaHQpO1xyXG4gICAgICBcclxuICAgICAgbGV0IGdhbGxlcnkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgXHJcbiAgICAgIGdhbGxlcnkuY2xhc3NMaXN0LmFkZCgnZ2FsbGVyeScsICdqcy1nYWxsZXJ5Jyk7XHJcblxyXG4gICAgXHJcbiAgICAgIGxldCBnYWxsZXJ5SGVpZ2h0PSBnYWxsZXJ5TWluSGVpZ2h0IC0gdGh1bWJuYWlsc0hlaWdodDtcclxuICAgICAgZ2FsbGVyeS5zdHlsZS5taW5IZWlnaHQgPSAoZ2FsbGVyeUhlaWdodCkgKyAncHgnO1xyXG4gICAgXHJcbiAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChnYWxsZXJ5KTtcclxuICAgICAgXHJcblxyXG5cclxuICAgICAgbGV0IGdhbGxlcnlXaWR0aD1nYWxsZXJ5Lm9mZnNldFdpZHRoO1xyXG4gICAgXHJcbiAgICAgIHNlbGYuZ2FsbGVyeS53aWR0aCA9IGdhbGxlcnlXaWR0aDtcclxuICBcclxuICAgICAgbGV0IGdhbGxlcnlMaXN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndWwnKTtcclxuICAgICAgXHJcbiAgICAgIGdhbGxlcnlMaXN0LmNsYXNzTGlzdC5hZGQoJ2dhbGxlcnlfX2xpc3QnLCAnanMtZ2FsbGVyeS1saXN0Jyk7XHJcbiAgICAgIGdhbGxlcnlMaXN0LnN0eWxlLm1pbkhlaWdodCA9IChnYWxsZXJ5SGVpZ2h0KSArICdweCc7XHJcbiAgICAgIFxyXG4gICAgICBzZWxmLmdhbGxlcnlMaXN0PWdhbGxlcnlMaXN0O1xyXG4gICAgICBcclxuICAgICAgXHJcblxyXG4gICAgICB0aGlzLnRodW1ibmFpbHMud2lkdGggPSB0aGlzLnRodW1ibmFpbHMuaXRlbVdpZHRoICogKGl0ZW1zQW1vdW50ICsgMSk7XHJcblxyXG4gICAgICBcclxuICAgICAgdGhpcy5hZGRJdGVtc1RvR2FsbGVyeShnYWxsZXJ5TGlzdCwgaXRlbXMpO1xyXG4gICAgICBzZWxmLnNob3dGaXJzdEl0ZW1zKGdhbGxlcnlMaXN0KTtcclxuICAgICAgLy8gY29uc29sZS5sb2coZ2FsbGVyeUxpc3QsIGl0ZW1zKTtcclxuICAgICAgXHJcbiAgICAgIGdhbGxlcnkuYXBwZW5kQ2hpbGQoZ2FsbGVyeUxpc3QpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgdGhpcy5uYXZpZ2F0aW9uKGNvbnRhaW5lcik7XHJcbiAgICAgICAgICBcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIFxyXG4gICAgICAvLyBjb25zb2xlLmxvZyhzZWxmLmdhbGxlcnlMaXN0KTtcclxuICAgICAgc2VsZi5hZGRJdGVtc1RvR2FsbGVyeShzZWxmLmdhbGxlcnlMaXN0LCBpdGVtcyk7XHJcbiAgICAgIFxyXG4gIFxyXG4gICAgICBcclxuICAgIH1cclxuICAgICAgXHJcbiAgICAgICBcclxuXHJcbiAgfVxyXG5cclxuXHJcblxyXG4gIFxyXG4gIGFkZEl0ZW1zVG9HYWxsZXJ5KGxpc3QsIGl0ZW1zKSB7XHJcbiAgICBcclxuICAgIGxldCBzZWxmPXRoaXM7XHJcblxyXG4gICAgLy8gY29uc29sZS5sb2cobGlzdCk7XHJcbiAgICBcclxuICAgIGxldCBnYWxsZXJ5TGlzdCA9IGxpc3Q7XHJcbiAgICBsZXQgZGF0YSA9IGl0ZW1zO1xyXG4gICAgbGV0IGRhdGFMZW5ndGggPSBkYXRhLmxlbmd0aDtcclxuICAgIGxldCBnYWxsZXJ5TWF4V2lkdGggPSB0aGlzLmdhbGxlcnkud2lkdGg7XHJcbiAgICBcclxuICAgIHNlbGYuZGF0YVNldC50b3RhbExlbmd0aCs9ZGF0YS5sZW5ndGg7XHJcbiAgICBcclxuICAgIFxyXG5cclxuICAgIGZvciAobGV0IGogPSAwOyBqIDwgZGF0YUxlbmd0aDsgaisrKSB7XHJcbiAgICBcclxuICAgICAgbGV0IGdhbGxlcnlJdGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTtcclxuICAgICAgZ2FsbGVyeUl0ZW0uY2xhc3NMaXN0LmFkZCgnZ2FsbGVyeV9faXRlbScsICdqcy1nYWxsZXJ5LWl0ZW0nKTtcclxuICAgIFxyXG4gICAgICBsZXQgZ2FsbGVyeUl0ZW1JRCA9ICdzbGlkZScgKyBkYXRhW2pdLmlkO1xyXG4gICAgICBnYWxsZXJ5SXRlbS5zZXRBdHRyaWJ1dGUoJ2lkJywgZ2FsbGVyeUl0ZW1JRCk7XHJcbiAgICBcclxuICAgICAgZ2FsbGVyeUl0ZW0uc3R5bGUubWF4V2lkdGggPSBnYWxsZXJ5TWF4V2lkdGggKyAncHgnO1xyXG4gICAgXHJcbiAgICAgIGdhbGxlcnlJdGVtLmlubmVySFRNTCA9ICc8aW1nIHNyYz1cIicgKyBkYXRhW2pdLnVybCArICdcIiBjbGFzcz1cImdhbGxlcnlfX2ltZ1wiPiAnO1xyXG4gICAgXHJcbiAgICAgIGdhbGxlcnlMaXN0LmFwcGVuZENoaWxkKGdhbGxlcnlJdGVtKTtcclxuICAgIFxyXG4gICAgfVxyXG5cclxuICAgIGxldCBzbGlkZXNOb2RlTGlzdCA9IGxpc3QuY2hpbGROb2RlcztcclxuICAgIFxyXG4gICAgLy8gY29uc29sZS5sb2coc2xpZGVzTm9kZUxpc3QpO1xyXG4gICAgXHJcbiAgICBsZXQgc2xpZGVzID0gW10uc2xpY2UuY2FsbChzbGlkZXNOb2RlTGlzdCk7XHJcbiAgICBcclxuICAgIC8vIGNvbnNvbGUubG9nKHNsaWRlcyk7XHJcbiAgICBcclxuICAgIHNlbGYuZ2FsbGVyeS5pdGVtcz1zbGlkZXM7XHJcblxyXG4gIH1cclxuXHJcblxyXG5cclxuICBzaG93Rmlyc3RJdGVtcyhsaXN0KSB7XHJcblxyXG4gICAgbGV0IHNlbGY9dGhpcztcclxuXHJcbiAgICBsZXQgc2xpZGVzPXNlbGYuZ2FsbGVyeS5pdGVtcztcclxuXHJcbiAgICBsZXQgZmlyc3RTbGlkZXMgPSBzbGlkZXMuZmlsdGVyKGZ1bmN0aW9uKGVsKSB7XHJcblxyXG4gICAgICBpZiAoZWwuZ2V0QXR0cmlidXRlKCdpZCcpID09PSAnc2xpZGUxJykgcmV0dXJuIGVsO1xyXG4gICAgICBcclxuXHJcbiAgICB9KTtcclxuXHJcblxyXG4gICAgZmlyc3RTbGlkZXMuZm9yRWFjaChmdW5jdGlvbihlbCkge1xyXG5cclxuICAgICAgZWwuY2xhc3NMaXN0LmFkZCgnaXMtdmlzaWJsZScpO1xyXG5cclxuICAgIH0pO1xyXG5cclxuICB9XHJcbiBcclxuXHJcbiAgbmF2aWdhdGlvbihnYWxsZXJ5Q29udGFpbmVyKSB7XHJcblxyXG4gICAgbGV0IHNlbGYgPSB0aGlzO1xyXG4gICAgbGV0IHRoaXNHYWxsZXJ5V3JhcHBlciA9IGdhbGxlcnlDb250YWluZXI7XHJcbiAgICBsZXQgdGhpc0dhbGxlcnlMaXN0ID0gdGhpcy5nYWxsZXJ5TGlzdDtcclxuICAgIGxldCBwcmV2QnRuLCBuZXh0QnRuOyBcclxuICAgIFxyXG4gICAgbGV0IHRoaXNHYWxsZXJ5Q2hpbGRyZW4gPSBbXS5zbGljZS5jYWxsKHRoaXNHYWxsZXJ5V3JhcHBlci5jaGlsZHJlbik7XHJcbiAgICBcclxuICAgIC8vIGNvbnNvbGUubG9nKHRoaXNHYWxsZXJ5Q2hpbGRyZW4pO1xyXG4gICAgXHJcbiAgICAvLyBjb25zb2xlLmxvZyhzdGF0dXMpO1xyXG4gICAgXHJcbiAgICBpZiAoKCFzZWxmLmdhbGxlcnkucHJldkJ0blNlbGVjdG9yKSAmJiAoIXNlbGYuZ2FsbGVyeS5uZXh0QnRuU2VsZWN0b3IpKSB7XHJcbiAgICBcclxuICAgICAgdGhpc0dhbGxlcnlXcmFwcGVyLmNsYXNzTGlzdC5hZGQoJ2FkZC1jb250cm9sbGVycycpO1xyXG4gICAgXHJcbiAgICAgIHByZXZCdG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgcHJldkJ0bi5jbGFzc0xpc3QuYWRkKCdjb250cm9sLWJ0bicsICdjb250cm9sLWJ0bl9fbGVmdCcsICdqcy1nYWxsZXJ5LXByZXYnKTtcclxuICAgIFxyXG4gICAgICBwcmV2QnRuLmlubmVySFRNTCA9ICc8YnV0dG9uIGNsYXNzPVwiaWNvbi1idG4gaWNvbi1idG5fbGVmdFwiPjwvYnV0dG9uPic7XHJcbiAgICBcclxuICAgIFxyXG4gICAgICBuZXh0QnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgIG5leHRCdG4uY2xhc3NMaXN0LmFkZCgnY29udHJvbC1idG4nLCAnY29udHJvbC1idG5fX3JpZ2h0JywgJ2pzLWdhbGxlcnktbmV4dCcpO1xyXG4gICAgXHJcbiAgICAgIG5leHRCdG4uaW5uZXJIVE1MID0gJzxidXR0b24gY2xhc3M9XCJpY29uLWJ0biBpY29uLWJ0bl9yaWdodFwiPjwvYnV0dG9uPic7XHJcbiAgICBcclxuICAgIFxyXG4gICAgICB0aGlzR2FsbGVyeVdyYXBwZXIuYXBwZW5kQ2hpbGQocHJldkJ0bik7XHJcbiAgICAgIHRoaXNHYWxsZXJ5V3JhcHBlci5hcHBlbmRDaGlsZChuZXh0QnRuKTtcclxuXHJcbiAgICAgXHJcbiAgICBcclxuICAgIH0gZWxzZSB7XHJcbiAgICBcclxuICAgICAgbmV4dEJ0biA9IHRoaXNHYWxsZXJ5Q2hpbGRyZW4uZmlsdGVyKGZ1bmN0aW9uKGVsKSB7XHJcbiAgICBcclxuICAgICAgICBpZiAoZWwuY2xhc3NMaXN0LmNvbnRhaW5zKHNlbGYuZ2FsbGVyeS5uZXh0QnRuU2VsZWN0b3IpKSB7IHJldHVybiBlbDsgfVxyXG4gICAgXHJcbiAgICAgIH0pO1xyXG4gICAgXHJcbiAgICBcclxuICAgICAgLy8gY29uc29sZS5sb2cobmV4dFNsaWRlQnV0dG9uKTtcclxuICAgIFxyXG4gICAgXHJcbiAgICAgIHByZXZCdG4gPSB0aGlzR2FsbGVyeUNoaWxkcmVuLmZpbHRlcihmdW5jdGlvbihlbCkge1xyXG4gICAgXHJcbiAgICAgICAgaWYgKGVsLmNsYXNzTGlzdC5jb250YWlucyhzZWxmLmdhbGxlcnkucHJldkJ0blNlbGVjdG9yKSkgeyByZXR1cm4gZWw7IH1cclxuICAgIFxyXG4gICAgICB9KTtcclxuICAgIFxyXG4gICAgXHJcbiAgICB9XHJcbiAgICBcclxuXHJcbiAgICBzZWxmLmdhbGxlcnkucHJldkJ0bk5vZGU9cHJldkJ0bjtcclxuICAgIHNlbGYuZ2FsbGVyeS5uZXh0QnRuTm9kZT1uZXh0QnRuO1xyXG4gICAgXHJcblxyXG4gICAgXHJcbiAgICBcclxuICAgIHRoaXMubmV4dFNsaWRlKCk7XHJcbiAgICBcclxuICAgIHRoaXMucHJldlNsaWRlKCk7XHJcbiAgICBcclxuICAgIFxyXG4gICAgXHJcbiAgICBcclxuICB9XHJcblxyXG5cclxuICBcclxuXHJcbiAgbmV4dFNsaWRlKCkge1xyXG5cclxuICAgIGxldCBzZWxmID0gdGhpcztcclxuICAgIGxldCBuZXh0U2xpZGVCdG4gPSBzZWxmLmdhbGxlcnkubmV4dEJ0bk5vZGU7XHJcbiAgIFxyXG5cclxuICAgIC8vIGNvbnNvbGUubG9nKHNsaWRlcyxjdXJyZW50U2xpZGUsc2VsZi5jdXJyZW50SW5kZXgpO1xyXG5cclxuXHJcbiAgICBuZXh0U2xpZGVCdG4uZm9yRWFjaChmdW5jdGlvbihlKSB7XHJcblxyXG4gICAgICAvLyBjb25zb2xlLmxvZyhzbGlkZXMsY3VycmVudFNsaWRlKTtcclxuXHJcbiAgICAgIGUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpIHtcclxuIFxyXG4gICAgICAgIGxldCBzbGlkZXMgPSBzZWxmLmdhbGxlcnkuaXRlbXM7XHJcbiAgICAgICAgICBcclxuICAgICAgICBjb25zb2xlLmxvZyhzZWxmLmdhbGxlcnkuaXRlbXMpO1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICAgICBcclxuICAgICAgICBsZXQgY3VycmVudFNsaWRlID0gc2xpZGVzLmZpbHRlcihmdW5jdGlvbihlbCkge1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICBpZiAoZWwuY2xhc3NMaXN0LmNvbnRhaW5zKCdpcy12aXNpYmxlJykpIHsgcmV0dXJuIGVsOyB9XHJcbiAgICAgICAgICBcclxuICAgICAgICB9KTtcclxuICAgICAgICAgIFxyXG4gICAgICAgIGN1cnJlbnRTbGlkZS5mb3JFYWNoKGZ1bmN0aW9uKGVsZW1lbnQsIGluZGV4LCBhcnJheSkge1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICBcclxuICAgICAgICAgIHNlbGYuY3VycmVudEluZGV4ID0gc2xpZGVzLmluZGV4T2YoYXJyYXlbaW5kZXhdKTtcclxuXHJcbiAgICAgICAgICBzZWxmLnNlY29uZGFyeUxvYWQoKTtcclxuXHJcbiAgICAgICAgICBzbGlkZXNbc2VsZi5jdXJyZW50SW5kZXhdLmNsYXNzTGlzdC50b2dnbGUoJ2lzLXZpc2libGUnKTtcclxuXHJcbiAgICAgICAgICBzZWxmLmN1cnJlbnRJbmRleCA9IChzZWxmLmN1cnJlbnRJbmRleCArIDEpICUgc2xpZGVzLmxlbmd0aDtcclxuXHJcbiAgICAgICAgICBzbGlkZXNbc2VsZi5jdXJyZW50SW5kZXhdLmNsYXNzTGlzdC50b2dnbGUoJ2lzLXZpc2libGUnKTtcclxuXHJcbiAgICAgICAgICAvLyBjb25zb2xlLmxvZyhzZWxmLmN1cnJlbnRJbmRleCk7XHJcbiAgICAgICAgICBzZWxmLmNoYW5nZVRodW1ibmFpbHMoKTtcclxuICAgICAgICB9KTtcclxuXHJcblxyXG5cclxuICAgICAgfSk7XHJcblxyXG5cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcHJldlNsaWRlKCkge1xyXG5cclxuICAgIGxldCBzZWxmID0gdGhpcztcclxuICAgIGxldCBzbGlkZXMgPSBzZWxmLmdhbGxlcnkuaXRlbXM7XHJcbiAgICBsZXQgbGFzdFNsaWRlID0gc2xpZGVzLmxlbmd0aCAtIDE7XHJcbiAgICBsZXQgcHJldlNsaWRlQnRuID0gc2VsZi5nYWxsZXJ5LnByZXZCdG5Ob2RlO1xyXG5cclxuXHJcbiAgICBsZXQgY3VycmVudFNsaWRlciA9IHNsaWRlcy5maWx0ZXIoZnVuY3Rpb24oZWwpIHtcclxuXHJcbiAgICAgIGlmIChlbC5jbGFzc0xpc3QuY29udGFpbnMoJ2lzLXZpc2libGUnKSkgeyByZXR1cm4gZWw7IH1cclxuXHJcbiAgICB9KTtcclxuXHJcblxyXG5cclxuICAgIGN1cnJlbnRTbGlkZXIuZm9yRWFjaChmdW5jdGlvbihlbGVtZW50LCBpbmRleCwgYXJyYXkpIHtcclxuXHJcblxyXG4gICAgICBzZWxmLmN1cnJlbnRJbmRleCA9IHNsaWRlcy5pbmRleE9mKGFycmF5W2luZGV4XSk7XHJcblxyXG5cclxuICAgICAgcHJldlNsaWRlQnRuLmZvckVhY2goZnVuY3Rpb24oZWwpIHtcclxuXHJcblxyXG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgLy8gY29uc29sZS5sb2coc2xpZGVzKTtcclxuXHJcbiAgICAgICAgICBzbGlkZXNbc2VsZi5jdXJyZW50SW5kZXhdLmNsYXNzTGlzdC50b2dnbGUoJ2lzLXZpc2libGUnKTtcclxuXHJcbiAgICAgICAgICBpZiAoc2VsZi5jdXJyZW50SW5kZXggPD0gMCkge1xyXG5cclxuXHJcbiAgICAgICAgICAgIHNlbGYuY3VycmVudEluZGV4ID0gbGFzdFNsaWRlO1xyXG5cclxuXHJcbiAgICAgICAgICB9IGVsc2UgaWYgKChzZWxmLmN1cnJlbnRJbmRleCA+IDApICYmIChzZWxmLmN1cnJlbnRJbmRleCA8PSBsYXN0U2xpZGUpKSB7XHJcblxyXG5cclxuICAgICAgICAgICAgc2VsZi5jdXJyZW50SW5kZXgtLTtcclxuXHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgc2xpZGVzW3NlbGYuY3VycmVudEluZGV4XS5jbGFzc0xpc3QudG9nZ2xlKCdpcy12aXNpYmxlJyk7XHJcblxyXG5cclxuICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHNlbGYuY3VycmVudEluZGV4KTtcclxuICAgICAgICAgIHNlbGYuY2hhbmdlVGh1bWJuYWlscygpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgfSk7XHJcblxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuXHJcbiAgYWRkVGh1bWJzKGdhbGxlcnlDb250YWluZXIsIHNlY29uZGFyeSkge1xyXG4gICAgXHJcbiAgICBsZXQgc2VsZiA9IHRoaXM7XHJcbiAgICBsZXQgc3RhdHVzPXNlY29uZGFyeSB8fCBmYWxzZTtcclxuICAgIGxldCBkYXRhID0gc2VsZi5wb3J0aW9uT2ZEYXRhO1xyXG4gICAgbGV0IGNvbnRhaW5lciA9IGdhbGxlcnlDb250YWluZXI7XHJcbiAgICBcclxuICAgIFxyXG4gICAgc2VsZi50aHVtYm5haWxzLnVybCA9IGRhdGEubWFwKGZ1bmN0aW9uKGVsKSB7XHJcbiAgICBcclxuICAgICAgcmV0dXJuIGVsLnRodW1ibmFpbFVybDtcclxuICAgIFxyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIFxyXG5cclxuICAgIGlmICghc3RhdHVzKSB7XHJcbiAgICBcclxuICAgICAgbGV0IHRodW1icyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgICAgXHJcbiAgICAgIHRodW1icy5zdHlsZS5taW5IZWlnaHQgPSBzZWxmLnRodW1ic0hlaWdodCArICdweCc7XHJcbiAgICAgIHRodW1icy5jbGFzc0xpc3QuYWRkKCdnLXRodW1ibmFpbHMnKTtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgXHJcbiAgICAgIGxldCB0aHVtYnNMaXN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndWwnKTtcclxuICAgICAgbGV0IHRodW1ic0xpc3RXaWR0aCA9IChzZWxmLnRodW1ibmFpbHMud2lkdGgpO1xyXG4gICAgICB0aHVtYnNMaXN0LnN0eWxlLndpZHRoID0gdGh1bWJzTGlzdFdpZHRoICsgJ3B4JztcclxuICAgICAgICAgIFxyXG4gICAgICBsZXQgdGh1bWJzTGlzdEhlaWdodCA9ICBzZWxmLnRodW1ic0xpc3RIZWlnaHQ7XHJcbiAgICAgIHRodW1ic0xpc3Quc3R5bGUuaGVpZ2h0ID0gdGh1bWJzTGlzdEhlaWdodCArICdweCc7XHJcbiAgICAgICAgICBcclxuICAgICAgdGh1bWJzTGlzdC5jbGFzc0xpc3QuYWRkKCdnLXRodW1ibmFpbHNfX2xpc3QnKTtcclxuICAgICAgICAgIFxyXG4gICAgICBzZWxmLnRodW1ibmFpbHMubGlzdD10aHVtYnNMaXN0O1xyXG4gICAgICAgICAgXHJcbiAgICAgIHRoaXMuYWRkVGh1bWJzSXRlbSggKTtcclxuICAgIFxyXG4gICAgICB0aHVtYnMuYXBwZW5kQ2hpbGQodGh1bWJzTGlzdCk7XHJcbiAgICAgICAgXHJcbiAgICAgIC8vIGNvbnNvbGUubG9nKGNvbnRhaW5lcik7XHJcbiAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aHVtYnMpO1xyXG4gICAgXHJcbiAgICBcclxuICAgICAgdGhpcy5tb3ZlVGh1bWJuYWlscygpO1xyXG4gICAgICAgICAgXHJcbiAgICAgIHRoaXMudG9nZ2xlVGh1bWJzKCk7XHJcbiAgICAgICBcclxuICAgIFxyXG4gICAgfSBlbHNlIHtcclxuICAgIFxyXG4gICAgICB0aGlzLmFkZFRodW1ic0l0ZW0oKTtcclxuICAgICAgICAgIFxyXG4gICAgICB0aGlzLm1vdmVUaHVtYm5haWxzKCk7XHJcbiAgICAgICAgICBcclxuICAgICAgdGhpcy50b2dnbGVUaHVtYnMoKTtcclxuICAgIFxyXG4gICAgfVxyXG4gICAgICAgXHJcbiAgfVxyXG4gICAgXHJcblxyXG4gIGFkZFRodW1ic0l0ZW0oKSB7XHJcbiAgICBcclxuICAgIGxldCBzZWxmPXRoaXM7XHJcbiAgICBsZXQgdGh1bWJzPXNlbGYudGh1bWJuYWlscy51cmw7XHJcbiAgICBsZXQgZGF0YT1zZWxmLnBvcnRpb25PZkRhdGE7XHJcbiAgICBsZXQgdGh1bWJzTGlzdD1zZWxmLnRodW1ibmFpbHMubGlzdDtcclxuICAgIGxldCB0aHVtYnNJdGVtV2lkdGg9dGhpcy50aHVtYm5haWxzLml0ZW1XaWR0aDtcclxuICAgIGxldCB0aHVtYnNIZWlnaHQ9c2VsZi50aHVtYm5haWxzLmxpc3RIZWlnaHQ7XHJcblxyXG4gICAgLy8gY29uc29sZS5sb2codGh1bWJzLCBkYXRhLCB0aHVtYnNIZWlnaHQpOyAgXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgIFxyXG4gICAgICBsZXQgdGh1bWJzSXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XHJcbiAgICAgICAgICBcclxuICAgICAgdGh1bWJzSXRlbS5zdHlsZS53aWR0aCA9IHRodW1ic0l0ZW1XaWR0aCArICdweCc7XHJcbiAgICAgIHRodW1ic0l0ZW0uc3R5bGUuaGVpZ2h0ID0gdGh1bWJzSGVpZ2h0ICsgJ3B4JztcclxuICAgICAgICAgICAgXHJcbiAgICAgIHRodW1ic0l0ZW0uY2xhc3NMaXN0LmFkZCgnZy10aHVtYm5haWxzX19pdGVtJyk7XHJcbiAgICAgICAgICBcclxuICAgICAgbGV0IGVxdWFsaXplcj1kYXRhW2ldLmlkLTE7XHJcblxyXG4gICAgICBsZXQgdGh1bWJzSXRlbVdyYXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgdGh1bWJzSXRlbVdyYXAuc2V0QXR0cmlidXRlKCdkYXRhLXRodW1iJywgZXF1YWxpemVyKTtcclxuICAgICAgdGh1bWJzSXRlbVdyYXAuY2xhc3NMaXN0LmFkZCgnZy10aHVtYm5haWxzX19pdGVtLXdyYXAnLCAnanMtdGh1bWItc2xpZGUnKTtcclxuICAgICAgICAgIFxyXG4gICAgICAgIFxyXG4gICAgICAgICAgXHJcbiAgICAgIHNlbGYudGh1bWJuYWlscy50cmlnZ2Vycy5wdXNoKHRodW1ic0l0ZW1XcmFwKTtcclxuICAgICAgICAgIFxyXG4gICAgICB0aHVtYnNJdGVtV3JhcC5pbm5lckhUTUwgPSAnPGltZyBzcmM9XCInICsgdGh1bWJzW2ldICsgJ1wiIGNsYXNzPVwiZy10aHVtYm5haWxzX19pbWdcIicgK1xyXG4gICAgICAgICAgICAgICAgICAnIHN0eWxlPVwibWF4LXdpZHRoOiAxMDAlO1wiPic7XHJcbiAgICAgICAgICBcclxuICAgICAgdGh1bWJzSXRlbS5hcHBlbmRDaGlsZCh0aHVtYnNJdGVtV3JhcCk7XHJcbiAgICAgICAgICBcclxuICAgICAgdGh1bWJzTGlzdC5hcHBlbmRDaGlsZCh0aHVtYnNJdGVtKTtcclxuICAgICAgICAgIFxyXG4gICAgfVxyXG4gICAgXHJcbiAgfVxyXG5cclxuICB0b2dnbGVUaHVtYnMoKSB7XHJcbiAgICBcclxuICAgIFxyXG4gICAgbGV0IHNlbGYgPSB0aGlzO1xyXG4gICAgXHJcbiAgICBsZXQgdGh1bWJUcmlnZ2VyID0gc2VsZi50aHVtYm5haWxzLnRyaWdnZXJzO1xyXG4gICAgXHJcbiAgICAvLyBjb25zb2xlLmxvZyh0aHVtYlRyaWdnZXJzTGlzdCk7XHJcbiAgICBcclxuICAgIHRodW1iVHJpZ2dlci5mb3JFYWNoKGZ1bmN0aW9uKGVsKSB7XHJcbiAgICBcclxuICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbihldmVudCkge1xyXG4gICAgXHJcbiAgICBcclxuICAgICAgICBsZXQgdHJpZ2dlclNpYmxpbmdTbGlkZXMgPSBlbC5jbG9zZXN0KCcuZy10aHVtYm5haWxzJykucHJldmlvdXNTaWJsaW5nLmNoaWxkTm9kZXM7XHJcbiAgICBcclxuICAgICAgICBjb25zb2xlLmxvZyh0cmlnZ2VyU2libGluZ1NsaWRlcyk7XHJcbiAgICBcclxuICAgICAgICBsZXQgc2xpZGVzID0gW10uc2xpY2UuY2FsbCh0cmlnZ2VyU2libGluZ1NsaWRlc1swXS5jaGlsZE5vZGVzKTtcclxuICAgIFxyXG4gICAgICAgIGNvbnNvbGUubG9nKHNsaWRlcyxzZWxmLmN1cnJlbnRJbmRleCk7XHJcblxyXG4gICAgICAgIGxldCBpbmRleFRvVHJpZ2dlciA9ICtldmVudC5jdXJyZW50VGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS10aHVtYicpO1xyXG4gICAgXHJcbiAgICAgICAgc2xpZGVzW3NlbGYuY3VycmVudEluZGV4XS5jbGFzc0xpc3QudG9nZ2xlKCdpcy12aXNpYmxlJyk7XHJcbiAgICBcclxuICAgICAgICBzZWxmLmN1cnJlbnRJbmRleCA9IGluZGV4VG9UcmlnZ2VyO1xyXG4gICAgXHJcbiAgICBcclxuICAgICAgICBzZWxmLmNoYW5nZVRodW1ibmFpbHMoKTtcclxuICAgIFxyXG4gICAgXHJcbiAgICAgICAgc2xpZGVzW3NlbGYuY3VycmVudEluZGV4XS5jbGFzc0xpc3QudG9nZ2xlKCdpcy12aXNpYmxlJyk7XHJcbiAgICAgIFxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgXHJcbiAgfVxyXG5cclxuXHJcbiAgXHJcbiAgY2hhbmdlVGh1bWJuYWlscygpIHtcclxuICAgIFxyXG4gICAgbGV0IHNlbGYgPSB0aGlzO1xyXG4gICAgbGV0IGluZGV4PXNlbGYuY3VycmVudEluZGV4O1xyXG4gICAgbGV0IHRodW1iVHJpZ2dlciA9IHNlbGYudGh1bWJuYWlscy50cmlnZ2VycztcclxuICAgIFxyXG4gICAgc2VsZi5tb3ZlVGh1bWJuYWlscygpO1xyXG4gICAgXHJcbiAgICBcclxuICAgIHRodW1iVHJpZ2dlci5mb3JFYWNoKGZ1bmN0aW9uKGVsKSB7XHJcbiAgICBcclxuICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZSgnaXMtYWN0aXZlJyk7XHJcbiAgICBcclxuICAgICAgbGV0IHRodW1iRGF0YUF0dHIgPSArZWwuZ2V0QXR0cmlidXRlKCdkYXRhLXRodW1iJyk7XHJcbiAgICBcclxuICAgICAgLy8gY29uc29sZS5sb2codGh1bWJEYXRhQXR0cik7XHJcbiAgICBcclxuICAgICAgaWYgKHRodW1iRGF0YUF0dHIgPT09IGluZGV4KSB7XHJcbiAgICBcclxuICAgICAgICBlbC5jbGFzc0xpc3QudG9nZ2xlKCdpcy1hY3RpdmUnKTtcclxuICAgICAgfVxyXG4gICAgXHJcbiAgICBcclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICBcclxuICB9XHJcblxyXG5cclxuICBtb3ZlVGh1bWJuYWlscygpIHtcclxuICAgIFxyXG4gICAgbGV0IHNlbGYgPSB0aGlzO1xyXG4gICAgbGV0IGluZGV4PXNlbGYuY3VycmVudEluZGV4O1xyXG4gICAgbGV0IGxlZnQgPSBpbmRleCAqIHNlbGYudGh1bWJuYWlscy5pdGVtV2lkdGggKyA1O1xyXG4gICAgXHJcbiAgICBsZXQgdG90YWxXaWR0aCA9IHNlbGYudGh1bWJuYWlscy53aWR0aDtcclxuICAgIGxldCB2aXNpYmxlV2lkdGggPSA2MDA7XHJcbiAgICBsZXQgc3RvcFBvaW50ID0gdG90YWxXaWR0aCAtIHZpc2libGVXaWR0aDtcclxuICAgIFxyXG4gICAgLy8gY29uc29sZS5sb2cobGVmdCx0b3RhbFdpZHRoLHZpc2libGVXaWR0aCxzdG9wUG9pbnQpO1xyXG4gICAgXHJcbiAgICBpZiAobGVmdCA+PSBzdG9wUG9pbnQpIHtcclxuICAgIFxyXG4gICAgICBsZWZ0ID0gc3RvcFBvaW50O1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBsZXQgcG9zaXRpb25MZWZ0ID0gJ2NhbGMoIC0nICsgbGVmdCArICdweCcgKyAnICsgMTVweCknO1xyXG4gICAgXHJcbiAgICBzZWxmLnRodW1ibmFpbHMubGlzdC5zdHlsZS5sZWZ0ID0gcG9zaXRpb25MZWZ0O1xyXG4gICAgXHJcbiAgfVxyXG5cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHNyYy9qcy9nYWxsZXJ5LmpzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUVBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFKQTtBQUNBO0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBUkE7QUFVQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQU5BO0FBUUE7QUFDQTtBQUNBO0FBSUE7QUFFQTtBQUNBOzs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJQTtBQUdBOzs7QUFJQTtBQUNBO0FBQ0E7QUFFQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBR0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7OztBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFHQTs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBR0E7OztBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUdBO0FBRUE7QUFDQTtBQUdBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUtBO0FBR0E7OztBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBRUE7QUFFQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUlBO0FBSUE7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUVBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBRUE7QUFHQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBS0E7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSUE7QUFHQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFFQTtBQUNBO0FBR0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBR0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFFQTs7O0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFFQTs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBR0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7Ozs7O0FBNXdCQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n(function (ELEMENT) {\n  ELEMENT.matches = ELEMENT.matches || ELEMENT.mozMatchesSelector || ELEMENT.msMatchesSelector || ELEMENT.oMatchesSelector || ELEMENT.webkitMatchesSelector;\n  ELEMENT.closest = ELEMENT.closest || function closest(selector) {\n    if (!this) return null;\n    if (this.matches(selector)) return this;\n    if (!this.parentElement) {\n      return null;\n    } else return this.parentElement.closest(selector);\n  };\n})(Element.prototype);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvanMvcG9seWZpbGxzLmpzPzlkYTYiXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKEVMRU1FTlQpIHtcclxuICBFTEVNRU5ULm1hdGNoZXMgPSBFTEVNRU5ULm1hdGNoZXMgfHwgRUxFTUVOVC5tb3pNYXRjaGVzU2VsZWN0b3IgfHwgRUxFTUVOVC5tc01hdGNoZXNTZWxlY3RvciB8fCBFTEVNRU5ULm9NYXRjaGVzU2VsZWN0b3IgfHwgRUxFTUVOVC53ZWJraXRNYXRjaGVzU2VsZWN0b3I7XHJcbiAgRUxFTUVOVC5jbG9zZXN0ID0gRUxFTUVOVC5jbG9zZXN0IHx8IGZ1bmN0aW9uIGNsb3Nlc3Qoc2VsZWN0b3IpIHtcclxuICAgIGlmICghdGhpcykgcmV0dXJuIG51bGw7XHJcbiAgICBpZiAodGhpcy5tYXRjaGVzKHNlbGVjdG9yKSkgcmV0dXJuIHRoaXM7XHJcbiAgICBpZiAoIXRoaXMucGFyZW50RWxlbWVudCkge3JldHVybiBudWxsO31cclxuICAgIGVsc2UgcmV0dXJuIHRoaXMucGFyZW50RWxlbWVudC5jbG9zZXN0KHNlbGVjdG9yKTtcclxuICB9O1xyXG59KEVsZW1lbnQucHJvdG90eXBlKSk7XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBzcmMvanMvcG9seWZpbGxzLmpzIl0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFFQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n__webpack_require__(1);\n\nvar _gallery = __webpack_require__(0);\n\nvar _gallery2 = _interopRequireDefault(_gallery);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar app = {\n\n  initialize: function initialize(settings) {\n\n    var gallery = new _gallery2.default(settings);\n  }\n\n};\n\napp.initialize({\n\n  galleryAmount: '10',\n  galleryItemSelector: '.js-gallery-item',\n  prevSlide: 'js-gallery-prev1',\n  nextSlide: 'js-gallery-next1',\n  container: '.js-gallery-wrap',\n  gallery: 'js-gallery',\n\n  thumbs: true\n  // loader: true,\n  // fullScreenMode: true\n\n});\n\napp.initialize({\n\n  galleryAmount: '100',\n  galleryItemSelector: '.js-gallery-item',\n  prevSlide: 'js-gallery-prev2',\n  nextSlide: 'js-gallery-next2',\n  container: '.js-gallery-wrap2',\n  gallery: 'js-gallery',\n\n  thumbs: true\n  // loader: true,\n  // fullScreenMode: true\n\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvanMvYXBwLmpzPzcxNmYiXSwic291cmNlc0NvbnRlbnQiOlsiXHJcbmltcG9ydCAnLi9wb2x5ZmlsbHMnO1xyXG5cclxuaW1wb3J0IEdhbGxlcnkgZnJvbSAnLi9nYWxsZXJ5JztcclxuXHJcblxyXG5cclxuXHJcblxyXG52YXIgYXBwID0ge1xyXG5cclxuICBpbml0aWFsaXplOiBmdW5jdGlvbihzZXR0aW5ncykge1xyXG5cclxuICAgIGxldCBnYWxsZXJ5ID0gbmV3IEdhbGxlcnkoc2V0dGluZ3MpO1xyXG4gICAgXHJcbiAgICAgIFxyXG4gIH0sXHJcblxyXG5cclxufTtcclxuXHJcblxyXG5hcHAuaW5pdGlhbGl6ZSh7XHJcblxyXG4gICAgXHJcbiAgZ2FsbGVyeUFtb3VudDogJzEwJyxcclxuICBnYWxsZXJ5SXRlbVNlbGVjdG9yOiAnLmpzLWdhbGxlcnktaXRlbScsXHJcbiAgcHJldlNsaWRlOiAnanMtZ2FsbGVyeS1wcmV2MScsXHJcbiAgbmV4dFNsaWRlOiAnanMtZ2FsbGVyeS1uZXh0MScsXHJcbiAgY29udGFpbmVyOiAnLmpzLWdhbGxlcnktd3JhcCcsXHJcbiAgZ2FsbGVyeTogJ2pzLWdhbGxlcnknLFxyXG4gXHJcbiAgdGh1bWJzOiB0cnVlXHJcbiAgLy8gbG9hZGVyOiB0cnVlLFxyXG4gIC8vIGZ1bGxTY3JlZW5Nb2RlOiB0cnVlXHJcblxyXG59KTtcclxuXHJcblxyXG5hcHAuaW5pdGlhbGl6ZSh7XHJcblxyXG4gICAgXHJcbiAgZ2FsbGVyeUFtb3VudDogJzEwMCcsXHJcbiAgZ2FsbGVyeUl0ZW1TZWxlY3RvcjogJy5qcy1nYWxsZXJ5LWl0ZW0nLFxyXG4gIHByZXZTbGlkZTogJ2pzLWdhbGxlcnktcHJldjInLFxyXG4gIG5leHRTbGlkZTogJ2pzLWdhbGxlcnktbmV4dDInLFxyXG4gIGNvbnRhaW5lcjogJy5qcy1nYWxsZXJ5LXdyYXAyJyxcclxuICBnYWxsZXJ5OiAnanMtZ2FsbGVyeScsXHJcbiBcclxuICB0aHVtYnM6IHRydWVcclxuICAvLyBsb2FkZXI6IHRydWUsXHJcbiAgLy8gZnVsbFNjcmVlbk1vZGU6IHRydWVcclxuXHJcbn0pO1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gc3JjL2pzL2FwcC5qcyJdLCJtYXBwaW5ncyI6Ijs7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQVJBO0FBQ0E7QUFZQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQWJBO0FBQ0E7QUFnQkE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFiQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2\n");

/***/ })
/******/ ]);